from openai import OpenAI
import uuid
import os
import re
import logging
import asyncio
import json
from datetime import datetime
from pathlib import Path
import unicodedata

from fastapi import Request, UploadFile, File, Form, HTTPException, FastAPI, APIRouter, Depends, WebSocket, WebSocketDisconnect
from fastapi.responses import JSONResponse, FileResponse
from fastapi.security import OAuth2PasswordBearer
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv
import aiofiles
from sqlalchemy.orm import Session

from app.database import get_db
from app.models import User, Message, Thread, Document, get_messages
from app.auth import get_current_user
from app.handlers.web_search import WebSearchHandler
from app.handlers.ai_request import send_custom_request, deep_research_service
from app.handlers.es_law_search import search_law_chunks
from app.handlers.user_doc_request import extract_text_from_any_document, process_uploaded_file
from transliterate import translit
from app.utils.text_utils import decode_unicode


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_FOLDER = "uploads"
DOCX_FOLDER = "documents_docx"

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(DOCX_FOLDER, exist_ok=True)

# OAuth2 —Å—Ö–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
router = APIRouter()

# ===================== –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ =====================


class ChatRequest(BaseModel):
    query: str


# ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====================


async def process_chat_uploaded_file(
        file: UploadFile) -> tuple[str, str, dict]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç.

    Args:
        file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        tuple[str, str, dict]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ (–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ_—Ñ–∞–π–ª–∞)
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ handlers, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
    from app.handlers.user_doc_request import process_uploaded_file as handler_process_file

    file_path, extracted_text, file_metadata = await handler_process_file(file)

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if file_path:
        logging.info("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", file_path)
        if extracted_text:
            logging.info(
                "–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: %s",
                extracted_text[:200])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤

    return file_path, extracted_text, file_metadata


def fix_encoding(query: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
        query.encode('utf-8').decode('utf-8')
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º decode_unicode
        return decode_unicode(query)
    except UnicodeError:
        try:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ latin1
            query = query.encode('latin1').decode('utf-8')
            # –ü—Ä–∏–º–µ–Ω—è–µ–º decode_unicode
            return decode_unicode(query)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {str(e)}")
            return query


# ===================== –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —á–∞—Ç–∞ =====================
@router.post("/chat/{thread_id}")
async def chat_in_thread(
        request: Request,
        thread_id: str, # –ü–æ–ª—É—á–∏—Ç—å –ª–∏–±–æ –∏–∑ API, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–µ, –ª–∏–±–æ –∏–∑ –ë–î –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–æ–µ.
        query: str = Form(None),
        file: UploadFile = File(None),
        current_user: User = Depends(get_current_user),
        db: Session = Depends(get_db),
):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
    """
    if query is None and file is None:
        raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∞–π–ª")

    query = query or ""
    query = fix_encoding(query)
    query = unicodedata.normalize('NFC', query)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ thread_id
    uuid_pattern = re.compile(r'^thread_[0-9a-f]{32}$')
    if thread_id == 'thread_id' or (not uuid_pattern.match(thread_id) and not thread_id.startswith('existing_')):
        thread_id = f"thread_{uuid.uuid4().hex}"
        logging.info(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π thread_id: {thread_id}")

    # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞
    thread = db.query(Thread).filter_by(id=thread_id, user_id=current_user.id).first()
    if not thread:
        thread = Thread(id=thread_id, user_id=current_user.id)
        db.add(thread)
        db.commit()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    if file:
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file.filename}")
        file_path, extracted_text, file_metadata = await process_uploaded_file(
            file=file,
            user_id=current_user.id,
            db=db
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = (
            f"–î–æ–∫—É–º–µ–Ω—Ç: {file.filename}\n"
            f"–†–∞–∑–º–µ—Ä: {file_metadata.get('file_size_formatted', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–¢–∏–ø: {file_metadata.get('extension', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        text_preview = extracted_text[:5000] + "..." if len(extracted_text) > 5000 else extracted_text
        download_url = file_metadata.get("download_url", "")
        
        recognized_text_response = (
            f"**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {file.filename}:**\n\n"
            f"```\n{text_preview}\n```\n\n"
            f"*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {file_metadata.get('char_count', 0)} —Å–∏–º–≤–æ–ª–æ–≤, "
            f"{file_metadata.get('word_count', 0)} —Å–ª–æ–≤.*\n\n"
            f"[–°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]({download_url})"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        db.add_all([
            Message(thread_id=thread_id, role="user", content=file_info),
            Message(thread_id=thread_id, role="assistant", content=recognized_text_response)
        ])
        db.commit()

        result = {
            "assistant_response": recognized_text_response,
            "recognized_text": extracted_text,
            "file_metadata": file_metadata,
            "success": True
        }

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞
        if query.strip():
            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            chat_history = await get_messages(thread_id=thread_id, db=db, user_id=current_user.id)
            chat_history_str = json.dumps(chat_history, ensure_ascii=False)
            
            enhanced_query = f"{query}\n\n–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:\n{extracted_text[:3000]}..."
            assistant_response = await send_custom_request(
                user_query=enhanced_query,
                thread_id=thread_id,
                db=db,
                chat_history=chat_history_str  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            )
            result["additional_response"] = assistant_response

        # –û–±–Ω–æ–≤–ª—è–µ–º first_message —Ç—Ä–µ–¥–∞, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if not thread.first_message:
            thread.first_message = file.filename
            db.commit()

        return result

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logging.info("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chat_history = await get_messages(thread_id=thread_id, db=db, user_id=current_user.id)
        last_5_history = chat_history[-5:] if len(chat_history) > 5 else chat_history
        chat_history_str = json.dumps(last_5_history, ensure_ascii=False)
        assistant_response = await send_custom_request(
            user_query=query,
            thread_id=thread_id,
            db=db,
            chat_history=chat_history_str  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º first_message —Ç—Ä–µ–¥–∞, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if not thread.first_message and query:
            thread.first_message = query[:100] + ('...' if len(query) > 100 else '')
            db.commit()

        return {"assistant_response": assistant_response}


# ===================== –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–¥–∞–º–∏ =====================


@router.post("/create_thread")
async def create_thread(current_user: User = Depends(get_current_user),
                        db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    import uuid
    new_thread_id = f"thread_{uuid.uuid4().hex}"
    thread = Thread(id=new_thread_id, user_id=current_user.id)
    db.add(thread)
    db.commit()
    logging.info(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥: {new_thread_id}")
    return {"thread_id": new_thread_id}


@router.get("/chat/threads")
async def get_threads(current_user: User = Depends(get_current_user),
                      db: Session = Depends(get_db)):
    threads = db.query(Thread).filter_by(user_id=current_user.id).order_by(
        Thread.created_at.desc()).all()

    # –î–æ–±–∞–≤–ª—è–µ–º first_message –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
        "threads": [{
            "id": t.id,
            "created_at": t.created_at,
            "first_message": t.first_message
        } for t in threads]
    }


@router.get("/messages/{thread_id}")
async def get_thread_messages(
    thread_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞."""
    return await get_messages(thread_id=thread_id, db=db, user_id=current_user.id)


# ===================== –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ =====================


@router.post("/download_recognized_text")
async def download_recognized_text(
    request: Request,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π."""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        headers_log = {k: v for k, v in request.headers.items()}
        logging.info(
            f"üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ download_recognized_text: {headers_log}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        content_type = request.headers.get("content-type", "")
        logging.info(f"üìÑ –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {content_type}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        file_path = None

        if "application/json" in content_type:
            # –î–ª—è JSON –∑–∞–ø—Ä–æ—Å–æ–≤
            try:
                body_data = await request.json()
                logging.info(
                    f"üì• –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ download_recognized_text (JSON): {body_data}"
                )
                file_path = body_data.get("file_path")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –Ω–∞—Å –ø—Ä—è–º–æ–≥–æ –ø—É—Ç–∏ –∫ output_documents
                if file_path and not os.path.exists(file_path):
                    possible_paths = [
                        os.path.join("output_documents", file_path),
                        os.path.join("output_documents",
                                     os.path.basename(file_path))
                    ]

                    for possible_path in possible_paths:
                        if os.path.exists(possible_path):
                            file_path = possible_path
                            logging.info(
                                f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: {file_path}")
                            break

            except json.JSONDecodeError as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}")
                raise HTTPException(status_code=400,
                                    detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")

        elif "multipart/form-data" in content_type:
            # –î–ª—è multipart/form-data –∑–∞–ø—Ä–æ—Å–æ–≤
            form_data = await request.form()
            logging.info(
                f"üì• –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ download_recognized_text (form-data): {form_data}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if "file_path" in form_data:
                file_path = form_data.get("file_path")
            elif "file_content" in form_data and "file_name" in form_data:
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞ –∏ –∏–º—è, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                original_filename = form_data.get("file_name", "recognized_text.txt")
                name_without_ext, _ = os.path.splitext(original_filename)
                txt_filename = f"{name_without_ext}.txt"
                return await create_and_return_file(
                    form_data.get("file_content"), txt_filename)
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            raw_body = await request.body()
            logging.info(
                f"üì• –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞–∑–º–µ—Ä: {len(raw_body)} –±–∞–π—Ç)"
            )

            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL-–ø–∞—Ä–∞–º–µ—Ç—Ä file_path
            file_path = request.query_params.get("file_path")

        logging.info(f"üìÑ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")

        if not file_path:
            logging.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            raise HTTPException(status_code=400,
                                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª—É
        possible_paths = [
            file_path,
            file_path.lstrip('/'),
            os.path.join(os.getcwd(), file_path.lstrip('/')),
            os.path.join("output_documents", os.path.basename(file_path)),
            os.path.join("output_documents", file_path.lstrip('/'))
        ]

        found = False
        for path in possible_paths:
            if os.path.exists(path):
                file_path = path
                found = True
                logging.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
                break

        if not found:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ output_documents
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ output_documents
            try:
                base_name = os.path.basename(file_path)
                output_dir = "output_documents"
                if os.path.exists(output_dir):
                    all_files = os.listdir(output_dir)
                    # –ù–∞–π–¥–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–∞–∑–æ–≤–æ–µ –∏–º—è
                    matching_files = [f for f in all_files if base_name in f]
                    if matching_files:
                        file_path = os.path.join(output_dir, matching_files[0])
                        found = True
                        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")

        if not found:
            logging.error(
                f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path} (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—É—Ç–∏: {possible_paths})"
            )
            raise HTTPException(status_code=404,
                                detail=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        _, ext = os.path.splitext(file_path)
        if ext.lower() == '.docx':
            content_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        elif ext.lower() == '.txt':
            content_type = 'text/plain'
        else:
            content_type = 'application/octet-stream'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
        filename = os.path.basename(file_path)
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {filename} (—Ç–∏–ø: {content_type})")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º FileResponse
        return FileResponse(path=file_path,
                            media_type=content_type,
                            filename=filename)
    except json.JSONDecodeError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}", exc_info=True)
        raise HTTPException(status_code=400,
                            detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}",
                      exc_info=True)
        raise HTTPException(status_code=500,
                            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")


@router.post("/upload_file")
async def upload_file(file: UploadFile = File(...),
                      current_user: User = Depends(get_current_user),
                      db: Session = Depends(get_db)):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if not file.filename.lower().endswith(
        ('.pdf', '.doc', '.docx', '.xlsx', '.jpg', '.jpeg', '.tif', '.tiff')):
        raise HTTPException(
            status_code=400,
            detail=
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .pdf, .doc, .docx, .xlsx, .jpg, .jpeg, .tif, .tiff"
        )

    file_path, extracted_text, file_metadata = await process_uploaded_file(file
                                                                           )

    # Save full extracted text to a .txt file
    extracted_filename = os.path.basename(file_path)
    filename_no_ext, _ = os.path.splitext(extracted_filename)
    txt_file_path = os.path.join("uploads", f"{filename_no_ext}_full_text.txt")
    async with aiofiles.open(txt_file_path, 'w', encoding='utf-8') as f:
        await f.write(extracted_text)

    download_url = f"/api/download/{filename_no_ext}_full_text.txt"

    # –°–æ–∑–¥–∞–µ–º file_metadata, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    file_metadata = {
        "file_size_formatted": f"{os.path.getsize(file_path) / 1024:.1f} –ö–ë",
        "extension": os.path.splitext(file.filename)[1].lower(),
        "char_count": len(extracted_text),
        "word_count": len(extracted_text.split()),
        "download_url": download_url
    }

    new_document = Document(user_id=current_user.id,
                            file_path=file_path,
                            download_url=download_url)
    db.add(new_document)
    db.commit()

    logging.info("üì• –§–∞–π–ª '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.", file.filename)
    return {
        "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.",
        "file_path": file_path,
        "download_url": download_url,
        "file_metadata": file_metadata
    }


@router.get("/download/{filename}")
async def download_file(filename: str, request: Request):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –¥–æ—Å—Ç—É–ø –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    possible_paths = [
        os.path.join(UPLOAD_FOLDER, filename),
        os.path.join("output_documents", filename),
        os.path.join(os.getcwd(), UPLOAD_FOLDER, filename),
        os.path.join(os.getcwd(), "output_documents", filename)
    ]

    file_path = None
    for path in possible_paths:
        if os.path.exists(path):
            file_path = path
            break

    if not file_path:
        logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename} (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—É—Ç–∏: {possible_paths})")
        raise HTTPException(status_code=404, detail=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")

    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ '{filename}' –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ {file_path}")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt
    download_filename = filename
    if not download_filename.lower().endswith('.txt'):
        download_filename = os.path.splitext(filename)[0] + '.txt'

    return FileResponse(
        path=file_path,
        filename=download_filename,
        media_type="text/plain"
    )


@router.post("/download_recognized_text")
async def create_and_return_file(
        file_content: str,
        file_name: str = "recognized_text.txt") -> FileResponse:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç –Ω–∞ .txt
    """
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        filename_base, file_ext = os.path.splitext(file_name)

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        if not file_ext or file_ext.lower() != '.txt':
            download_filename = f"{filename_base}.txt"
        else:
            download_filename = file_name

        # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        download_filename = download_filename.replace(" ", "_")

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        internal_filename = f"{timestamp}_{download_filename}"
        file_path = os.path.join(UPLOAD_FOLDER, internal_filename)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"üìÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è —Ñ–∞–π–ª–∞: {internal_filename}")
        logging.info(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {download_filename}")

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ
        try:
            decoded_content = file_content
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç –≤ URL encoding
            if isinstance(file_content, str) and '%' in file_content[:100]:
                from urllib.parse import unquote
                decoded_content = unquote(file_content)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
            async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
                await f.write(decoded_content)
        except Exception as encoding_error:
            logging.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—Å—Ç–∞: {str(encoding_error)}"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
                await f.write(file_content)

        logging.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {file_path}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return FileResponse(
            path=file_path,
            filename=download_filename,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
            media_type="text/plain"
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")
        raise HTTPException(status_code=500,
                            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")


async def download_recognized_text(
    request: Request,
    file_content: str = Form(None),
    file_name: str = Form("recognized_text.txt"),
    current_user: User = Depends(get_current_user)):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not current_user:
        logging.warning(
            f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {request.client.host}"
        )
        raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

    if file_content:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt
        filename_base, _ = os.path.splitext(file_name)
        txt_file_name = f"{filename_base}.txt"
        return await create_and_return_file(file_content, txt_file_name)
    else:
        raise HTTPException(status_code=400,
                            detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")

print("–ú–∞—Ä—à—Ä—É—Ç—ã chat_router:", [r.path for r in router.routes])
