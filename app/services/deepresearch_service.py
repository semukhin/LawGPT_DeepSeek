import os
import sys
import json
import asyncio
import aiohttp
import logging
import re  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
from typing import Dict, Optional, Any, List
from pathlib import Path
from datetime import datetime
from app.handlers.user_doc_request import extract_text_from_any_document
from app.handlers.deepresearch_audit import audit_deepresearch, deepresearch_audit
from app.services.deepseek_service import DeepSeekService
from app.models import PromptLog  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
from sqlalchemy.orm import Session
from app import models

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from app.config import DEEPSEEK_API_KEY, DEEPSEEK_MODEL

# üìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ third_party –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ shandu
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
THIRD_PARTY_DIR = os.path.join(BASE_DIR, "third_party")
if THIRD_PARTY_DIR not in sys.path:
    sys.path.insert(0, THIRD_PARTY_DIR)

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s"
)

def highlight_court_numbers(query: str) -> str:
    """
    –í—ã–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª –≤ –∑–∞–ø—Ä–æ—Å–µ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—É–¥–æ–≤.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞: –ê40-103922/2018, –ê76-90322/2022
    - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è/–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –í–°: 307-–≠–°23-6153, 306-–≠–°20-14681(13)
    - –°—É–¥—ã –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏: 02-5543/2025, 02-5508/2022
    """
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–ª
    patterns = [
        # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞
        r'\b([–ê–ê][\d]+-[\d]+/[\d]{4})\b',
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –í–°
        r'\b([\d]{1,3}-[–≠–°–ê–ö–ì–ö–ü–£–ö–≠]{2}[\d]{2}-[\d]+(?:\s*\(\d+\))?)\b',
        # –°—É–¥—ã –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏
        r'\b([\d]{2}-[\d]+/[\d]{4})\b',
        # –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏
        r'–ü–û–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï\s+(?:–æ—Ç\s+[\d\s\w\.]+\s+)?‚Ññ\s*([\d/]+)'
    ]
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    all_case_numbers = []
    
    # –ò—â–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for pattern in patterns:
        found_numbers = re.findall(pattern, query, re.IGNORECASE)
        all_case_numbers.extend([num.strip() for num in found_numbers if num.strip()])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –í–° –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    determine_pattern = r'–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï\s+–æ—Ç\s+([\d\s\w\.]+)\s+[N–ù‚Ññ]\s*([\d\-–ê-–ØA-Z]+)'
    determine_matches = re.findall(determine_pattern, query, re.IGNORECASE)
    for date, num in determine_matches:
        all_case_numbers.append(f"{num.strip()} –æ—Ç {date.strip()}")
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –¥–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü –∑–∞–ø—Ä–æ—Å–∞
    if all_case_numbers:
        highlighted_query = query + "\n\n===== –í–ê–ñ–ù–û! –ù–û–ú–ï–†–ê –°–£–î–ï–ë–ù–´–• –î–ï–õ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø: =====\n"
        for i, number in enumerate(all_case_numbers, 1):
            highlighted_query += f"{i}. {number}\n"
        highlighted_query += "\n======================================================="
        highlighted_query += "\n–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ. –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª."
        return highlighted_query
    
    return query

def validate_court_numbers(response: str, original_query: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤ –¥–µ–ª —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—É–¥–æ–≤.
    """
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–ª
    patterns = [
        # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞
        r'\b([–ê–ê][\d]+-[\d]+/[\d]{4})\b',
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –í–°
        r'\b([\d]{1,3}-[–≠–°–ê–ö–ì–ö–ü–£–ö–≠]{2}[\d]{2}-[\d]+(?:\s*\(\d+\))?)\b',
        # –°—É–¥—ã –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏
        r'\b([\d]{2}-[\d]+/[\d]{4})\b',
        # –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏
        r'‚Ññ\s*([\d/]+)'
    ]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    query_numbers = set()
    for pattern in patterns:
        found = re.findall(pattern, original_query, re.IGNORECASE)
        query_numbers.update([n.strip() for n in found if n.strip()])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    determine_pattern = r'–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï\s+–æ—Ç\s+([\d\s\w\.]+)\s+[N–ù‚Ññ]\s*([\d\-–ê-–ØA-Z]+)'
    determine_matches = re.findall(determine_pattern, original_query, re.IGNORECASE)
    for date, num in determine_matches:
        query_numbers.add(f"{num.strip()} –æ—Ç {date.strip()}")
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        query_numbers.add(num.strip())
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response_numbers = set()
    for pattern in patterns:
        found = re.findall(pattern, response, re.IGNORECASE)
        response_numbers.update([n.strip() for n in found if n.strip()])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
    determine_matches_resp = re.findall(determine_pattern, response, re.IGNORECASE)
    for date, num in determine_matches_resp:
        response_numbers.add(f"{num.strip()} –æ—Ç {date.strip()}")
        response_numbers.add(num.strip())
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ
    invalid_numbers = []
    for num in response_numbers:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–µ
        if num not in query_numbers:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ê
            if num.startswith("–ê") and num[1:] not in query_numbers:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
                normalized_num = re.sub(r'[/\-]', '', num)
                normalized_query_nums = [re.sub(r'[/\-]', '', qn) for qn in query_numbers]
                if normalized_num not in normalized_query_nums:
                    invalid_numbers.append(num)
            else:
                invalid_numbers.append(num)
 
    return response

def ensure_valid_court_numbers(answer: str, original_query: str) -> str:
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.
    
    Args:
        answer: –û—Ç–≤–µ—Ç, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–æ–≤ –¥–µ–ª
    validated_answer = validate_court_numbers(answer, original_query)
    
    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if "[–°–ò–°–¢–ï–ú–ê:" in validated_answer:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        warning_match = re.search(r'\[–°–ò–°–¢–ï–ú–ê:.*?–Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª.*?:(.*?)\.\s*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', validated_answer)
        if warning_match:
            invalid_numbers = [num.strip() for num in warning_match.group(1).split(',')]
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
            clean_answer = answer
            for invalid_num in invalid_numbers:
                # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞ –æ–±–æ–±—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
                clean_answer = re.sub(
                    r'\b' + re.escape(invalid_num) + r'\b', 
                    "—Å–æ–≥–ª–∞—Å–Ω–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ", 
                    clean_answer
                )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            return clean_answer + "\n\n[–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –±—ã–ª–∏ –æ–±–æ–±—â–µ–Ω—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏]"
    
    return validated_answer

class ResearchResult:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, query: str, analysis: str, timestamp: str, error: Optional[str] = None):
        self.query = query
        self.analysis = analysis
        self.timestamp = timestamp
        self.error = error
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            "query": self.query,
            "analysis": self.analysis,
            "timestamp": self.timestamp,
            "error": self.error
        }
    
    def save_to_file(self, filepath: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª."""
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.to_dict(), f, ensure_ascii=False, indent=2)

class DeepResearchService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Shandu –∏ DeepSeek API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    
    def __init__(self, output_dir: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
        """
        self.output_dir = output_dir or "research_results"
        os.makedirs(self.output_dir, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DeepSeek —Å–µ—Ä–≤–∏—Å
        self.deepseek_service = DeepSeekService(
            api_key=DEEPSEEK_API_KEY,
            model=DEEPSEEK_MODEL,
            temperature=0.7,  # –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            max_tokens=8000,
            timeout=120
        )
            
        logging.info(f"DeepResearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.output_dir}")
        
        # –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.usage_counter = 0

    def filter_suspicious_court_numbers(self, text: str) -> str:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
    def is_general_query(self, query: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–º (–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º).
        
        Args:
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            True, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π, False, –µ—Å–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        query_lower = query.lower().strip()
        
        # –°–ø–∏—Å–æ–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ (–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        legal_terms = [
            "–∑–∞–∫–æ–Ω", "–∫–æ–¥–µ–∫—Å", "—Å—Ç–∞—Ç—å—è", "–¥–æ–≥–æ–≤–æ—Ä", "–∏—Å–∫", "—Å—É–¥", "–ø—Ä–∞–≤–æ", "—é—Ä–∏—Å—Ç", 
            "–Ω–æ—Ä–º–∞", "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω", "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç", "—à—Ç—Ä–∞—Ñ", 
            "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "–ø—Ä–µ—Ç–µ–Ω–∑–∏", "–≤–∏–Ω–∞", "—É—Å—Ç–∞–≤", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "–≥–∫", "–≥–ø–∫", "–∫–∞—Å", 
            "–Ω–∞–ª–æ–≥", "—é—Ä–ª–∏—Ü–æ", "—Ñ–∏–∑–ª–∏—Ü", "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏", "—Ñ–≥—É–ø", "–ø—Ä–∞–≤–µ",
            "–∞—Ä–µ–Ω–¥–∞", "–∑–∞–ª–æ–≥", "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "—Å–¥–µ–ª–∫–∞", "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ", "–ø—Ä–∞–≤–æ–º–æ—á–∏—è",
            "–∞–∫—Ü–∏–æ–Ω–µ—Ä", "–¥–∏–≤–∏–¥–µ–Ω–¥—ã", "–ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–∏–º—É—â–µ—Å—Ç–≤–æ",
            "–æ—Ñ–µ—Ä—Ç–∞", "–∞–∫—Ü–µ–ø—Ç", "–Ω–æ—Ç–∞—Ä–∏—É—Å", "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", "–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è", "—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–≤—ã–ø–∏—Å–∫–∞", "–µ–≥—Ä—é–ª", "–æ–æ–æ",
            "–∫–∞–ø–∏—Ç–∞–ª", "—É—á—Ä–µ–¥–∏—Ç–µ–ª—å", "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–∏–ø", "–∞–æ", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü", "–ª–∏—Ü–µ–Ω–∑",
            "—Å–∞–Ω–∫—Ü", "–∞—Ä–±–∏—Ç—Ä–∞–∂", "–∏—Å—Ç–µ—Ü", "–æ—Ç–≤–µ—Ç—á–∏–∫", "–∞–ø–µ–ª–ª—è—Ü", "–∫–∞—Å—Å–∞—Ü", "–∏–º—É—â–µ—Å—Ç–≤", "—Å–≤–æ"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–í–°–ï–ì–î–ê –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
        for term in legal_terms:
            if term in query_lower:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω, —Ç–æ —ç—Ç–æ –Ω–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
                return False
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        general_patterns = [
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–∑–¥–æ—Ä–æ–≤–æ", "—Ö–∞–π",
            "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "—Å–∞–ª—é—Ç", "–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "—Ö–µ–ª–ª–æ—É", "–∫—É", "—Ö–æ–ª–∞", "–π–æ—É", "–≤–µ—á–µ—Ä –¥–æ–±—Ä—ã–π",
            
            # –û —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
            "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "–∫—Ç–æ —Ç—ã", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å", "—á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è",
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "–∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—à—å—Å—è", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª",
            "—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ç–≤–æ—è –≤–µ—Ä—Å–∏—è", "—Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏", "—Ç—ã —Ä–æ–±–æ—Ç", "—Ç—ã –±–æ—Ç", 
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", 
            "–∫–æ–≥–¥–∞ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª–∏", "–≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è", "—Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            
            # –í–æ–ø—Ä–æ—Å—ã –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏
            "–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–∫–∞–∫ –∂–∏–∑–Ω—å", "–∫–∞–∫ —Ç—ã", "–≤—Å–µ —Ö–æ—Ä–æ—à–æ", 
            "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å", "–∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å", "–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞",
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            "—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø—Å", "–ø–∞—Å–∏–±", "—Å–µ–Ω–∫—Å", "–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω", "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞", 
            "–º–µ—Ä—Å–∏", "–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω", "–±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–æ—Ç –¥—É—à–∏", "—Ü–µ–Ω—é", "—Ä–µ—Å–ø–µ–∫—Ç",
            
            # –§—Ä–∞–∑—ã –ø—Ä–æ—â–∞–Ω–∏—è
            "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "—É–≤–∏–¥–∏–º—Å—è", "–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–±—ã–≤–∞–π",
            "—É–¥–∞—á–∏", "–ø—Ä–æ—â–∞–π", "–¥–æ —Å–∫–æ—Ä–æ–≥–æ", "–ø–æ–∫–µ–¥–∞", "–±—É–¥—å –∑–¥–æ—Ä–æ–≤", "–ø–æ–∫–µ–¥–æ–≤–∞", "—á–∞–æ",
            
            # –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –æ—Ü–µ–Ω–∫–∏
            "–º–æ–ª–æ–¥–µ—Ü", "–æ—Ç–ª–∏—á–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "–Ω–µ–ø–ª–æ—Ö–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", 
            "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ", "–±–ª–µ—Å—Ç—è—â–µ", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ", "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ", "—É–º–Ω–∏—Ü–∞", 
            "—à–∏–∫–∞—Ä–Ω–æ", "–±—Ä–∞–≤–æ", "–≤–ø–µ—á–∞—Ç–ª—è–µ—Ç", "–æ–≥–æ–Ω—å", "–±–æ–º–±–∞",
            
            # –ò–∑–≤–∏–Ω–µ–Ω–∏—è –∏ —Å–æ–∂–∞–ª–µ–Ω–∏—è
            "–∏–∑–≤–∏–Ω–∏", "–ø—Ä–æ—Å—Ç–∏", "—Å–æ—Ä—Ä–∏", "–≤–∏–Ω–æ–≤–∞—Ç", "–ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è", "–º–Ω–µ –∂–∞–ª—å", "—Å–æ–∂–∞–ª–µ—é", 
            "–Ω–µ —Ö–æ—Ç–µ–ª", "–º–æ—è –æ—à–∏–±–∫–∞", "–º–æ–π –∫–æ—Å—è–∫", "–Ω–µ –æ–±–∏–∂–∞–π—Å—è", "–∏–∑–≤–∏–Ω—è—é—Å—å",
            
            # –°–æ–≥–ª–∞—Å–∏–µ/–Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ
            "—Å–æ–≥–ª–∞—Å–µ–Ω", "–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "—Ç–∞–∫ —Ç–æ—á–Ω–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–Ω–µ–≤–µ—Ä–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", 
            "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–≤–µ—Ä–Ω–æ", "—Å–æ–≥–ª–∞—à—É—Å—å", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é", "–∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç",
            
            # –í–æ–ø—Ä–æ—Å—ã –æ –º–æ–¥–µ–ª–∏
            "–∫–∞–∫—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–∫–∞–∫–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π", "–∫–∞–∫–æ–π llm", "–∫–∞–∫–∞—è –º–æ–¥–µ–ª—å", "–Ω–∞ —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å",
            "–Ω–∞ –∫–∞–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–Ω–∞ –∫–∞–∫–æ–π –æ—Å–Ω–æ–≤–µ", "–Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ", "deepseek", "claude", "gpt",
            "—Ç–æ–∫–µ–Ω—ã", "–∫–æ–Ω—Ç–µ–∫—Å—Ç", "–æ–±—É—á–µ–Ω–∏–µ", "—è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–∏–∏", "–∞–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π", "ai",
            "—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "—Ç–≤–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "transformer", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä",
            
            # –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            "–æ–∫", "—è—Å–Ω–æ", "–ø–æ–Ω—è–ª", "–ø–æ–Ω—è—Ç–Ω–æ", "–¥–∞", "–Ω–µ—Ç", "–∫–æ–Ω–µ—á–Ω–æ", "—Ä–∞–∑—É–º–µ–µ—Ç—Å—è", "–≤–æ–∑–º–æ–∂–Ω–æ",
            "–∏–º–µ–Ω–Ω–æ", "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "–≤–µ—Ä–æ—è—Ç–Ω–æ", "–æ—á–µ–≤–∏–¥–Ω–æ", "–ª–æ–≥–∏—á–Ω–æ", "–±–µ–∑—É—Å–ª–æ–≤–Ω–æ",
            
            # –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏
            "–ø–æ–º–æ–≥–∏", "–ø–æ–¥—Å–∫–∞–∂–∏", "–ø–æ–º–æ—â—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "–æ–±—ä—è—Å–Ω–∏", "—Ä–∞–∑—ä—è—Å–Ω–∏", "—É—Ç–æ—á–Ω–∏", "–∫–∞–∫ –º–Ω–µ", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫ –±—ã—Ç—å",
            
            # –£–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏
            "–æ—à–∏–±–∫–∞", "—Ç—ã –æ—à–∏–±–∞–µ—à—å—Å—è", "—ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–æ—à–∏–±—Å—è", "–Ω–µ —Ç–∞–∫", "–Ω–µ—Ç–æ—á–Ω–æ",
            "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–Ω–µ–ø—Ä–∞–≤–¥–∞", "–ø—É—Ç–∞–µ—à—å", "–∑–∞–±–ª—É–∂–¥–∞–µ—à—å—Å—è", 
            
            # –ü—Ä–æ—Å—å–±—ã –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
            "–ø—Ä–æ–¥–æ–ª–∂–∞–π", "–¥–∞–ª—å—à–µ", "—á—Ç–æ –µ—â–µ", "–∏ —á—Ç–æ", "–µ—â–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ",
            "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ", "–¥–∞–ª—å–Ω–µ–π—à–µ–µ", "—Å–ª–µ–¥—É—é—â–µ–µ", "—á—Ç–æ –ø–æ—Ç–æ–º", "–∞ –∑–∞—Ç–µ–º"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in general_patterns:
            if pattern in query_lower:
                return True

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 4 —Å–ª–æ–≤), —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        if len(query_lower.split()) < 4 and len(query_lower) < 25:
            return True
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å, —á—Ç–æ –æ–Ω –æ–±—â–∏–π
        return False

    @audit_deepresearch
    async def research(
        self, 
        query: str, 
        additional_context: Optional[List[Dict]] = None,
        thread_id: Optional[str] = None,
        message_id: Optional[int] = None,
        user_id: Optional[int] = None,
        db: Optional[Session] = None
    ) -> ResearchResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DeepSeek API.
        
        Args:
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            additional_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            thread_id: ID —Ç—Ä–µ–¥–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö –¥–∏–∞–ª–æ–≥–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    
        Returns:
            ResearchResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        """
        self.usage_counter += 1
        logging.info(f"[DeepResearch #{self.usage_counter}] –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {len(query)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if db is not None and thread_id is not None and user_id is not None:
            try:
                system_prompt = """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π..."""  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã prompt_logs –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ message_id
                from sqlalchemy import inspect
                inspector = inspect(db.get_bind())
                try:
                    columns = [col['name'] for col in inspector.get_columns('prompt_logs')]
                    has_message_id = 'message_id' in columns
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ—Ç
                    has_message_id = False
                    
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
                prompt_data = {
                    "thread_id": thread_id,
                    "user_id": user_id,
                    "system_prompt": system_prompt,
                    "user_prompt": query[:10000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ë–î
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º message_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ None
                if has_message_id and message_id is not None:
                    prompt_data["message_id"] = message_id
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                prompt_log = models.PromptLog(**prompt_data)
                db.add(prompt_log)
                db.commit()
                logging.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id}")
            except Exception as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                try:
                    db.rollback()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")


        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ query - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if isinstance(query, str) and (query.endswith('.docx') or query.endswith('.pdf')):
            query = self.read_document(query) or query
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–º (–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º)
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–Ω–∞—á–∞–ª–∞ –Ω–µ –±—ã–ª –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω 
        # –≤ send_custom_request, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if "–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:" in query and "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê" in query:
            # –≠—Ç–æ —É–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ send_custom_request,
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query_part = query.split("–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")[1].split("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê")[0].strip()
            is_general = self.is_general_query(user_query_part)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å
            is_general = self.is_general_query(query)
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if is_general:
            logging.info(f"[DeepResearch #{self.usage_counter}] –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—â–∏–π (–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π) –∑–∞–ø—Ä–æ—Å")
            system_prompt = """
            –¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
            –°–µ–π—á–∞—Å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
            
            –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–≤—è–∑–∞–Ω —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–º–∞–º–∏, —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
            –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É.
            
            –ù–µ –ø—ã—Ç–∞–π—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã.
            –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ "–ø—Ä–∏–≤–µ—Ç" –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –∞ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ü—Ä–∏–≤–µ—Ç".
            
            –ù–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–±–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å, —á—Ç–æ —Ç—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT, 
            —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
            """
        else:
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É.
                –¢—ã - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç), —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é, –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º,
                –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ 
                –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
                
                1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –∑–∞–ø—Ä–æ—Å—ã, –≤—ã–¥–µ–ª—è—è:
                - –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å —Ç–æ—á–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞,
                - –°—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—É–¥–æ–≤,
                - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.

                2. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–æ–Ω—ã –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –¥–æ–≥–æ–≤–æ—Ä–æ–≤, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º–∞—Ö. 

                3. –¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ kad.arbitr.ru, –°–ü–° "–ì–∞—Ä–∞–Ω—Ç" –∏–ª–∏ "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å", "–ö–æ–¥–µ–∫—Å" –∏–ª–∏ kad.arbitr.ru, —Ç–∞–∫ –∫–∞–∫ —É —Ç–µ–±—è –∏ —Ç–∞–∫ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–¥–µ–∫—Å–∞–º –∏ –∑–∞–∫–æ–Ω–∞–º.

                4. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–µ–±–µ –Ω–µ–ª—å–∑—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–∞—Ç—å –∫–∞–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è.

                5. –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–µ–¥—É–µ—Ç –≤–µ—Å—Ç–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, —Å—Ç—Ä–æ–≥–æ –∏–∑–±–µ–≥–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ.
                
                –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –ü–û –†–ê–ë–û–¢–ï –° –ù–û–ú–ï–†–ê–ú–ò –°–£–î–ï–ë–ù–´–• –î–ï–õ:

                1. –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –Ø–í–ù–û —É–∫–∞–∑–∞–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                   
                2. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. 
                   
                3. –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ (–ø—Ä–æ–º—Ç–µ) –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –¥–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê40-767106/2022), 
                   –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –ò–ú–ï–ù–ù–û –≠–¢–û–¢ –Ω–æ–º–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
                   
                4. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω—ã 
                   –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤: "—Å–æ–≥–ª–∞—Å–Ω–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ...", 
                   "–∫–∞–∫ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –≤ —Ä–µ—à–µ–Ω–∏—è—Ö –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°—É–¥–∞..." –∏ —Ç.–¥.
                   
                5. –ü—Ä–æ–≤–µ—Ä—è–π –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ - –æ–Ω –¥–æ–ª–∂–µ–Ω –¢–û–ß–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä—É –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. 
                –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª(–Ω–∞–ø—Ä–∏–º–µ—Ä –ê60-78901/2021 –∏–ª–∏ –ê40-123456/2020), –∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ —Å –ø—Ä–æ–º—Ç–æ–º.
                   
                6. –ü—Ä–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –í–°–ï–ì–î–ê —É–∫–∞–∑—ã–≤–∞–π –¢–û–ß–ù–´–ô –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –ø—Ä–æ–º—Ç–µ)."""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–º —è–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        # –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if "–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:" in query and "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:" in query:
            # –ó–∞–ø—Ä–æ—Å —É–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            user_prompt = query
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            user_prompt = f"–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:\n\n{query}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if additional_context:
                user_prompt += "\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
                for ctx in additional_context:
                    source_type = ctx.get("type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                    if ctx.get("found"):
                        user_prompt += f"\n--- –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_type} ---\n"
                        if "data" in ctx:
                            if isinstance(ctx["data"], list):
                                for item in ctx["data"][:3]:  # –ë–µ—Ä–µ–º –¥–æ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                    user_prompt += f"{item[:1000]}...\n\n"
                            elif isinstance(ctx["data"], dict):
                                for key, value in ctx["data"].items():
                                    if key not in ["path", "error", "type"]:
                                        user_prompt += f"{value[:1000]}...\n\n"
                            else:
                                user_prompt += f"{str(ctx['data'])[:3000]}...\n\n"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª –∏ –∏—Ö –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            enhanced_prompt = highlight_court_numbers(user_prompt)

            # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –ë–î...
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek API - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ó–î–ï–°–¨
            # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ self.deepseek_service.generate_with_system –∏ –Ω–∞–ø—Ä—è–º—É—é —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": enhanced_prompt}
            ]
            
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
            url = f"{self.deepseek_service.api_base}/chat/completions"
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.deepseek_service.api_key}"
            }
            payload = {
                "model": self.deepseek_service.model,
                "messages": messages,
                "temperature": self.deepseek_service.temperature,
                "max_tokens": self.deepseek_service.max_tokens
            }
            
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API: %s", url)
            
            # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º 120 —Å–µ–∫—É–Ω–¥
            timeout = aiohttp.ClientTimeout(total=120)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                try:
                    async with session.post(url, headers=headers, json=payload) as response:
                        if response.status != 200:
                            error_text = await response.text()
                            logging.error(f"–û—à–∏–±–∫–∞ DeepSeek API ({response.status}): {error_text}")
                            analysis = f"–û—à–∏–±–∫–∞ API: {response.status} - {error_text}"
                        else:
                            response_json = await response.json()
                            if 'choices' in response_json and len(response_json['choices']) > 0:
                                analysis = response_json['choices'][0]['message']['content']
                            else:
                                analysis = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API DeepSeek"
                except asyncio.TimeoutError:
                    logging.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 120 —Å–µ–∫)")
                    analysis = "–°–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = ResearchResult(
                query=query[:1000] + "..." if len(query) > 3000 else query,
                analysis=analysis,
                timestamp=self._get_current_time()
            )
                    
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek API
            analysis = await self.deepseek_service.generate_with_system(system_prompt, enhanced_prompt)


            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek API
            analysis = await self.deepseek_service.generate_with_system(system_prompt, enhanced_prompt)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª –≤ –æ—Ç–≤–µ—Ç–µ
            validated_analysis = validate_court_numbers(analysis, query)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = ResearchResult(
                query=query[:1000] + "..." if len(query) > 3000 else query,
                analysis=validated_analysis,
                timestamp=self._get_current_time()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if self.output_dir:
                result_filename = f"research_{self.usage_counter}_{self._get_timestamp()}.json"
                result_path = os.path.join(self.output_dir, result_filename)
                result.save_to_file(result_path)
            
            return result
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}"
            logging.error(f"[DeepResearch #{self.usage_counter}] {error_msg}")
            return ResearchResult(
                query=query[:5000] + "..." if len(query) > 5000 else query,
                analysis=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}",
                timestamp=self._get_current_time(),
                error=str(e)
            )

    @audit_deepresearch
    def read_document(self, file_path: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
            
        Args:
            file_path: –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                    
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            logging.info(f"[DeepResearch #{self.usage_counter}] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_path}")
            extracted_text = extract_text_from_any_document(file_path)
                
            if extracted_text:
                logging.info(f"[DeepResearch #{self.usage_counter}] –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç ({len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
                max_length = 50000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–µ–π
                if len(extracted_text) > max_length:
                    extracted_text = extracted_text[:max_length] + "...[—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞]"
                        
                return extracted_text
                
            return None
        except Exception as e:
            logging.error(f"[DeepResearch #{self.usage_counter}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_path}: {str(e)}")
            return None  

    @audit_deepresearch
    def _get_timestamp(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."""
        return datetime.now().strftime("%Y%m%d_%H%M%S")
        
    @audit_deepresearch
    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ."""
        return datetime.now().isoformat()