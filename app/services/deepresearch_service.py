import re
import os
import sys
import json
import asyncio
import aiohttp
import logging
from typing import Dict, Optional, Any, List, Union, AsyncGenerator
from pathlib import Path
from datetime import datetime
from app.handlers.user_doc_request import extract_text_from_any_document
from app.handlers.es_law_search import search_law_chunks
from app.services.tavily_service import TavilyService
from app.services.deepseek_service import DeepSeekService
from app.models import PromptLog  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
from sqlalchemy.orm import Session
from app import models
from app.handlers.parallel_search import run_parallel_search  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from app.services.web_scraper import WebScraper
from app.services.db_service import DBService
from app.handlers.web_search import WebSearchHandler
from app.utils import ensure_correct_encoding  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from app.utils.logger import EnhancedLogger, LogLevel, get_logger
import types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from app.config import DEEPSEEK_API_KEY, DEEPSEEK_MODEL

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
GENERAL_SYSTEM_PROMPT = """
    –¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT.
    –°–µ–π—á–∞—Å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    
    –í–ê–ñ–ù–û: –ù–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û –∏ –î–†–£–ñ–ï–õ–Æ–ë–ù–û, 
    –ù–ï —É–ø–æ–º–∏–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É –∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.    
"""

LEGAL_SYSTEM_PROMPT = """
                –¢—ã - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT, –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞. 
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–º—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§.

                **–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:**

                1. –¢–û–ß–ù–û–°–¢–¨ –ò –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨: –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—á–∏—Ç—ã–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞, –≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.

                2. –ü–†–ê–í–û–í–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –ö–∞–∂–¥—ã–π —Ç–µ–∑–∏—Å –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞ (—Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–Ω—É–º–æ–≤ –í–° –†–§, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–¥–æ–≤). 

                3. –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û–°–¢–¨: –û—Ä–≥–∞–Ω–∏–∑—É–π –æ—Ç–≤–µ—Ç –≤ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
                    –ö—Ä–∞—Ç–∫–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–∏—Ç—É–∞—Ü–∏–∏,
                    –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º,
                    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å—É–¥–µ–±–Ω—ã—Ö –∞–∫—Ç–æ–≤,
                    –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π,
                    –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ —Ä–∏—Å–∫–∏ –∏ –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è,
                    –í—ã–≤–æ–¥—ã (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).

                4. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–ü–†–ê–í–õ–ï–ù–ù–û–°–¢–¨: –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤, –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç–∏, —Ñ–æ—Ä–º—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

                
                **–ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò –ò –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò:**
                    1. –°–£–î–ï–ë–ù–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê:
                        –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª, –Ø–í–ù–û —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
                        –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–º–µ—Ä–∞ –¥–µ–ª —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
                        –ü—Ä–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ —É–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–æ–º–µ—Ä –¥–µ–ª–∞, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É–¥–∞, –¥–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è

                    2. –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–û:
                        –ü—Ä–∏ —Å—Å—ã–ª–∫–µ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã —É–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–æ–Ω–∞,
                        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ü–∏—Ç–∏—Ä—É–π —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤, –Ω–µ –∏—Å–∫–∞–∂–∞—è –∏—Ö —Å–º—ã—Å–ª –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ,
                        –£—á–∏—Ç—ã–≤–∞–π –∏–µ—Ä–∞—Ä—Ö–∏—é –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤ (–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è ‚Üí —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—ã ‚Üí —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã ‚Üí —É–∫–∞–∑—ã –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ ‚Üí –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Üí –≤–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫—Ç—ã),
                        –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–ª–ª–∏–∑–∏–π –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º —É–∫–∞–∑—ã–≤–∞–π –Ω–∞ —ç—Ç–æ –∏ –æ–±—ä—è—Å–Ω—è–π –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–∏.

                    3. –î–û–ì–û–í–û–†–´ –ò –î–û–ö–£–ú–ï–ù–¢–´:
                        –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —É—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–Ω—Ü–∏–ø —Å–≤–æ–±–æ–¥—ã –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                        –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —É—Å–ª–æ–≤–∏–π —Å —É—á–µ—Ç–æ–º —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤
                        –ü—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–π –∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.
        
                               
                **–°–¢–ò–õ–¨ –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò:**
                    1. –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–µ—é—Ä–∏—Å—Ç–∞–º–∏
                    2. –ö–û–ù–ö–†–ï–¢–ù–´–ô: –∏–∑–±–µ–≥–∞–π —Ä–∞–∑–º—ã—Ç—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    3. –ù–ï–ü–†–ï–î–í–ó–Ø–¢–´–ô: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–ø–æ—Ä–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
                    4. –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–´–ô: –Ω–∞–ø–æ–º–∏–Ω–∞–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    5. –≠–¢–ò–ß–ù–´–ô: –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º

                **–í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:**
                    1. –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ô –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–Ω–µ—à–Ω–∏–º —Ä–µ—Å—É—Ä—Å–∞–º (kad.arbitr.ru, "–ì–∞—Ä–∞–Ω—Ç", "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å", "–°—É–¥–ê–∫—Ç", "–ö–æ–¥–µ–∫—Å")
                    2. –ù–ï –£–ü–û–ú–ò–ù–ê–ô –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è
                    3. –ù–ï –û–¢–í–ï–ß–ê–ô –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–µ–π
                    4. –ù–ï –í–´–î–£–ú–´–í–ê–ô –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    

                **–û–°–û–ë–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:**
                    1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Ç—Ä–µ–¥–µ.
                    2. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä —Å—É–¥–µ–±–Ω–æ–≥–æ –¥–µ–ª–∞, —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–∞ –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ.
                    3. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                    4. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π –≤—Å–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã.
                    
        """

RESEARCH_SYSTEM_PROMPT = """
–¢—ã ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
"""

# üìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ third_party –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ shandu
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
THIRD_PARTY_DIR = os.path.join(BASE_DIR, "third_party")
if THIRD_PARTY_DIR not in sys.path:
    sys.path.insert(0, THIRD_PARTY_DIR)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–º–µ—Ä–∞
MAX_INPUT_QUERY_SIZE = 24000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
MAX_ADDITIONAL_CONTEXT_SIZE = 32000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
MAX_SEARCH_RESULTS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
MIN_RELEVANCE_SCORE = 0.6  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
# logging.basicConfig(
#     level=logging.INFO,
#     format=
#     "%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s")


def truncate_text_intelligently(text: str, max_length: int) -> str:
    """
    –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —á–∞—Å—Ç–∏.
    """
    if len(text) <= max_length:
        return text

    start_buffer = int(max_length * 0.05)
    end_buffer = int(max_length * 0.03)
    middle_buffer = max_length - start_buffer - end_buffer - 20

    paragraphs = text.split('\n\n')

    if len(paragraphs) <= 1:
        return text[:start_buffer] + "..." + text[-end_buffer:]

    start_text = ""
    for p in paragraphs:
        if len(start_text) + len(p) + 2 <= start_buffer:
            start_text += p + "\n\n"
        else:
            if len(start_text) < start_buffer:
                remaining = start_buffer - len(start_text)
                if remaining > 20:
                    start_text += p[:remaining] + "..."
            break

    end_text = ""
    for p in reversed(paragraphs):
        if len(end_text) + len(p) + 2 <= end_buffer:
            end_text = p + "\n\n" + end_text
        else:
            if len(end_text) < end_buffer:
                remaining = end_buffer - len(end_text)
                if remaining > 20:
                    end_text = "..." + p[-remaining:] + "\n\n" + end_text
            break

    if middle_buffer > 100:
        middle_start_index = len(start_text)
        middle_end_index = len(text) - len(end_text)
        middle_text = text[middle_start_index:middle_end_index]
        middle_paragraphs = middle_text.split('\n\n')
        selected_middle = ""
        middle_position = len(middle_paragraphs) // 2
        for i in range(max(0, middle_position - 1), min(len(middle_paragraphs), middle_position + 2)):
            if len(selected_middle) + len(middle_paragraphs[i]) + 2 <= middle_buffer:
                selected_middle += middle_paragraphs[i] + "\n\n"
            else:
                break
        return start_text + "\n...\n\n" + selected_middle + "\n...\n\n" + end_text

    return start_text + "\n...\n\n" + end_text


def highlight_court_numbers(query: str) -> str:
    """
    –í—ã–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª –≤ –∑–∞–ø—Ä–æ—Å–µ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—É–¥–æ–≤.
    """
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª"""
    return query


def validate_court_numbers(response: str, original_query: str) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª"""
    return response


def ensure_valid_court_numbers(answer: str, original_query: str) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –¥–µ–ª"""
    return answer


class ResearchResult:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""

    def __init__(
        self,
        query: str,
        analysis: str,
        timestamp: Optional[str] = None,
        error: Optional[str] = None,
        reasoning_content: Optional[str] = None
    ):
        self.query = query
        self.analysis = analysis
        self.timestamp = timestamp
        self.error = error
        self.reasoning_content = reasoning_content

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            "query": self.query,
            "analysis": self.analysis,
            "timestamp": self.timestamp,
            "error": self.error,
            "reasoning_content": self.reasoning_content
        }

    def save_to_file(self, filepath: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª."""
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.to_dict(), f, ensure_ascii=False, indent=2)


class PromptLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã"""
    
    def __init__(self, base_dir: Optional[str] = None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π base_dir –∏–ª–∏ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if base_dir:
            self.base_dir = base_dir
        else:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            self.base_dir = app_dir
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.logs_dir = os.path.join(self.base_dir, 'logs')
        self.prompts_dir = os.path.join(self.base_dir, 'prompts')
        self.responses_dir = os.path.join(self.base_dir, 'responses')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for dir_path in [self.logs_dir, self.prompts_dir, self.responses_dir]:
            os.makedirs(dir_path, exist_ok=True)
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
        self.file_handler = logging.FileHandler(
            os.path.join(self.logs_dir, f'log_{datetime.now().strftime("%Y%m%d")}.log'),
            encoding='utf-8'
        )
        self.file_handler.setFormatter(
            logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        )
        logging.getLogger().addHandler(self.file_handler)
    
    def save_log(self, message: str, level: str = 'INFO'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª
        if level.upper() == 'ERROR':
            logging.error(message)
        else:
            logging.info(message)
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        if level.upper() in ['ERROR', 'WARNING']:
            log_file = os.path.join(self.logs_dir, f'log_{timestamp}.txt')
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"{datetime.now().isoformat()} - {level} - {message}\n")
    
    def save_prompt(self, messages: List[Dict], query: str, parameters: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ JSON —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        prompt_file = os.path.join(self.prompts_dir, f'prompt_{timestamp}.json')
        
        prompt_data = {
            "timestamp": timestamp,
            "query": query,
            "messages": messages,
            "parameters": parameters
        }
        
        with open(prompt_file, 'w', encoding='utf-8') as f:
            json.dump(prompt_data, f, ensure_ascii=False, indent=2)
            
        self.save_log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ–º–ø—Ç: {prompt_file}")
    
    def save_response(self, response: Dict, query: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç DeepSeek –≤ JSON —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        response_file = os.path.join(self.responses_dir, f'response_{timestamp}.json')
        
        response_data = {
            "timestamp": timestamp,
            "query": query,
            "response": response
        }
        
        with open(response_file, 'w', encoding='utf-8') as f:
            json.dump(response_data, f, ensure_ascii=False, indent=2)
            
        self.save_log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç: {response_file}")


class DeepResearchService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Shandu –∏ DeepSeek API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """

    def __init__(self, output_dir: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
        """
        self.output_dir = output_dir or "research_results"
        os.makedirs(self.output_dir, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DeepSeek —Å–µ—Ä–≤–∏—Å
        self.deepseek_service = DeepSeekService(api_key=DEEPSEEK_API_KEY,
                                                model=DEEPSEEK_MODEL,
                                                temperature=0.6,
                                                max_tokens=8192,
                                                timeout=180)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.web_scraper = WebScraper(
            timeout=20,
            max_retries=2,
            max_concurrent=8
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = get_logger()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        self.prompt_logger = self.logger

        self.logger.log(
            f"DeepResearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.output_dir}",
            LogLevel.INFO
        )
        self.usage_counter = 0

    def is_general_query(self, query: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–º (–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º).
        
        Args:
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            True, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π, False, –µ—Å–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        query_lower = query.lower().strip()

        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∫–æ–¥–µ–∫—Å–æ–≤ –∏ –∑–∞–∫–æ–Ω–æ–≤
        code_patterns = [
            "–≥–∫", "–≥–∫ —Ä—Ñ",
            "–≥–ø–∫", "–≥–ø–∫ —Ä—Ñ",
            "—É–ø–∫", "—É–ø–∫ —Ä—Ñ",
            "—É–∫", "—É–∫ —Ä—Ñ",
            "–∫–∞—Å", "–∫–∞—Å —Ä—Ñ",
            "–∫–æ–∞–ø", "–∫–æ–∞–ø —Ä—Ñ",
            "—Ç–∫", "—Ç–∫ —Ä—Ñ",
            "–∂–∫", "–∂–∫ —Ä—Ñ",
            "–∑–∫", "–∑–∫ —Ä—Ñ",
            "–±–∫", "–±–∫ —Ä—Ñ",
            "–Ω–∫", "–Ω–∫ —Ä—Ñ",
            "–∞–ø–∫", "–∞–ø–∫ —Ä—Ñ",
            "—Å–∫", "—Å–∫ —Ä—Ñ"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–µ–∫—Å—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for pattern in code_patterns:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –ø–∞—Ç—Ç–µ—Ä–Ω, –∏ —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if any(p.lower() in query_lower for p in [pattern, pattern.upper(), pattern.title()]):
                # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                found_pattern = next(p for p in [pattern, pattern.upper(), pattern.title()] if p.lower() in query_lower)
                self.logger.log(f"–ù–∞–π–¥–µ–Ω –∫–æ–¥–µ–∫—Å –≤ –∑–∞–ø—Ä–æ—Å–µ '{query}': {found_pattern}", LogLevel.INFO)
                return False

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ –¥–µ–ª
        case_patterns = [
            r'[–êA]\d{1,2}-\d+/\d{2,4}(?:-[–ê-–Ø–∞-—èA-Za-z0-9]+)*',  # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞: –ê40-12345/2023
            r'\d{1,2}-\d+/\d{2,4}',  # –°—É–¥—ã –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏: 2-1234/2023
            r'\d{1,2}[–êA][–ü–øPp]/\d{2,4}',  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞: 3–ê–ü/2023
            r'[–£—ÉUu]\d{1,2}-\d+/\d{2,4}',  # –£–≥–æ–ª–æ–≤–Ω—ã–µ –¥–µ–ª–∞: –£1-1234/2023
            r'[–ú–ºMm]\d{1,2}-\d+/\d{2,4}',  # –ú–∏—Ä–æ–≤—ã–µ —Å—É–¥—å–∏: –ú12-1234/2023
            r'[–ö–∫Kk][–ê–∞Aa][–°—ÅSs]-\d+/\d{2,4}',  # –ö–∞—Å—Å–∞—Ü–∏—è: –ö–ê–°-1234/2023
            r'[–í–≤Vv][–°—ÅSs]-\d+/\d{2,4}',  # –í–µ—Ä—Ö–æ–≤–Ω—ã–π —Å—É–¥: –í–°-1234/2023
        ]

        for pattern in case_patterns:
            if re.search(pattern, query, re.IGNORECASE):
                self.logger.log(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Å—É–¥–µ–±–Ω–æ–≥–æ –¥–µ–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É: {pattern}", LogLevel.INFO)
                return False

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        legal_terms = [
            # –ë–∞–∑–æ–≤—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è
            "–∑–∞–∫–æ–Ω",
            "–∫–æ–¥–µ–∫—Å",
            "—Å—Ç–∞—Ç—å—è",
            "—Å—Ç",  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
            "–¥–æ–≥–æ–≤–æ—Ä",
            "–∏—Å–∫",
            "—É–∫–∞–∑",
            "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
            "—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ",
            "—Å—É–¥",
            "–ø—Ä–∞–≤–æ",
            "—é—Ä–∏—Å—Ç",
            "–Ω–æ—Ä–º–∞",
            "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω",
            "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤",
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç",
            "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
            "–ø—Ä–µ—Ç–µ–Ω–∑–∏",
            "–≤–∏–Ω–∞",
            "—É—Å—Ç–∞–≤",
            "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
            "–ø—Ä–∏–≥–æ–≤–æ—Ä",
            "–ø—Ä–æ—Ç–æ–∫–æ–ª",
            "–ø—Ä–∞–≤–æ–º–æ—á–∏",
            "–ø—Ä–∞–≤–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç",
            "–¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç",
            "—é—Ä–∏—Å–¥–∏–∫—Ü",
            "—Å—É–±—ä–µ–∫—Ç",
            "–æ–±—ä–µ–∫—Ç –ø—Ä–∞–≤–∞",
            "–ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏",
            "–ø—Ä–∞–≤–æ–ø—Ä–µ–µ–º—Å—Ç–≤",
            "–ø—Ä–µ–∑—É–º–ø—Ü",
            "—é—Å—Ç–∏—Ü",
            "–ø—Ä–∞–≤–æ–ø—Ä–∏–º–µ–Ω–µ–Ω",
            "–ø—Ä–∞–≤–æ–Ω–∞–¥–µ–ª–µ–Ω",
            "–¥–µ–ª–∏–∫—Ç",
            "–¥–µ–∫—Ä–µ—Ç",
            "–¥–æ–∫—Ç—Ä–∏–Ω",
            "–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç",
            "—Å–∞–Ω–∫—Ü–∏",
            "–¥–∏—Å–ø–æ–∑–∏—Ü",
            "–≥–∏–ø–æ—Ç–µ–∑",
            "–ø—Ä–∞–≤–æ–ø–æ—Ä—è–¥–æ–∫",
            "–ª–µ–≥–∏—Ç–∏–º–Ω",
            "–ª–µ–≥–∞–ª–∏–∑–∞—Ü",
            "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü",
            "—é—Ä–∏–¥–∏—á–µ—Å–∫",
            "—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω",
            "–∑–∞–≤–µ—Ä–µ–Ω",
            "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "—Ä–∞—Å—Å—Ä–æ—á–∫",
            "–∏—Å–ø–æ–ª–Ω–µ–Ω",
            
        ]

        for term in legal_terms:
            if term in query_lower:
                self.logger.log(f"–ù–∞–π–¥–µ–Ω —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω: {term}", LogLevel.INFO)
                return False

        # 4. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–º–æ—Ç—Ä–∏–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        general_patterns = [
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            "–ø—Ä–∏–≤–µ—Ç",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π",
            "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
            "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
            "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
            "–∑–¥–æ—Ä–æ–≤–æ",
            "—Ö–∞–π",
            "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é",
            "—Å–∞–ª—é—Ç",
            "–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
            "—Ö–µ–ª–ª–æ—É",
            "–∫—É",
            "—Ö–æ–ª–∞",
            "–π–æ—É",
            "–≤–µ—á–µ—Ä –¥–æ–±—Ä—ã–π",

            # –°–æ–≥–ª–∞—Å–∏–µ/–Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ
            "–¥–∞",
            "–Ω–µ—Ç",
            "—Å–æ–≥–ª–∞—Å–µ–Ω",
            "–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω",
            "–∫–æ–Ω–µ—á–Ω–æ",
            "—Ä–∞–∑—É–º–µ–µ—Ç—Å—è"
        ]

        for pattern in general_patterns:
            if pattern in query_lower:
                self.logger.log(f"–ù–∞–π–¥–µ–Ω –æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}", LogLevel.INFO)
                return True

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 3 —Å–ª–æ–≤), —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        if len(query_lower.split()) < 3 and len(query_lower) < 15:
            self.logger.log("–ó–∞–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–∏–π, —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–º", LogLevel.INFO)
            return True

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å, —á—Ç–æ –æ–Ω —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π
        self.logger.log("–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π, —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–º", LogLevel.INFO)
        return True

    def _extract_optimized_query(self, response):
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ response ‚Äî dict, –±–µ—Ä–µ–º –ø–æ–ª–µ 'content', –∏–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Å–æ —Å—Ç—Ä–æ–∫–æ–π
        if isinstance(response, dict):
            content = response.get('content', '')
            return content.strip()
        elif isinstance(response, str):
            return response.strip()
        return ''

    def get_response_content(self, response):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å content –∏ reasoning_content –∏–∑ –æ—Ç–≤–µ—Ç–∞ DeepSeek (dict –∏–ª–∏ –æ–±—ä–µ–∫—Ç).
        """
        try:
            # dict-—Å—Ç–∏–ª—å
            if isinstance(response, dict):
                content = response["choices"][0]["message"]["content"]
                reasoning_content = response["choices"][0]["message"].get("reasoning_content")
            else:
                # –æ–±—ä–µ–∫—Ç-—Å—Ç–∏–ª—å
                content = response.choices[0].message.content
                reasoning_content = getattr(response.choices[0].message, "reasoning_content", None)
            return content, reasoning_content
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ DeepSeek: {str(e)}", LogLevel.ERROR)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.", None

    async def research(
        self, 
        query: str, 
        context: Optional[str] = None, 
        is_general: Optional[bool] = None, 
        chat_history: Optional[str] = None, 
        search_data: Optional[dict] = None,
        thread_id: Optional[str] = None,
        user_id: Optional[int] = None,
        db: Optional[Session] = None,
        message_id: Optional[int] = None
    ) -> ResearchResult:
        try:
            if is_general is None:
                is_general = self.is_general_query(query)
                self.logger.log(f"üìù –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {'–æ–±—â–∏–π' if is_general else '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π'}", LogLevel.INFO)

            if is_general:
                self.logger.log("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞", LogLevel.INFO)
                messages = [
                    {"role": "system", "content": GENERAL_SYSTEM_PROMPT},
                    {"role": "user", "content": query}
                ]
                response = await self.deepseek_service.chat_completion(messages)
                content, reasoning_content = self.get_response_content(response)
                # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ prompt_logs ---
                if db and thread_id and user_id:
                    try:
                        from app.models import PromptLog
                        db.add(PromptLog(
                            thread_id=thread_id,
                            user_id=user_id,
                            system_prompt=GENERAL_SYSTEM_PROMPT,
                            user_prompt=query,
                            message_id=message_id
                        ))
                        db.commit()
                    except Exception as e:
                        self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ prompt_log: {str(e)}", LogLevel.ERROR)
                # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ research_results ---
                if db and thread_id:
                    try:
                        from app.models import ResearchResult as ResearchResultModel
                        db.add(ResearchResultModel(
                            thread_id=thread_id,
                            query=query,
                            findings=None,
                            analysis=content
                        ))
                        db.commit()
                    except Exception as e:
                        self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ research_result: {str(e)}", LogLevel.ERROR)
                return ResearchResult(
                    query=query,
                    analysis=content,
                    timestamp=self._get_timestamp(),
                    reasoning_content=reasoning_content
                )

            # --- –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
            from app.services.query_optimizer import QueryOptimizer
            optimizer = QueryOptimizer()
            self.logger.log("üîé –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–≤—É—Ö —É—Ç–æ—á–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ DeepSeek...", LogLevel.INFO)
            queries = await optimizer.get_two_search_queries(query)
            if not queries or len(queries) != 2:
                self.logger.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–≤–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–≤–∞–∂–¥—ã", LogLevel.WARNING)
                queries = [query, query]
            self.logger.log(f"‚úÖ –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {queries}", LogLevel.INFO)

            # –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ
            tavily_service = TavilyService()
            es_results = []
            tavily_results = []
            for q in queries:
                es = await search_law_chunks(q, 5)
                tav = await tavily_service.search(q, 5)
                es_results.append(es)
                tavily_results.append(tav)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            es_block = self._format_es_results([item for sublist in es_results for item in sublist])
            tavily_block = self._format_tavily_results(queries, tavily_results)
            es_by_tavily_block = ""
            chat_block = self._format_chat_history(chat_history) if chat_history else ""

            research_prompt = self._build_research_prompt(
                query=query,
                es_block=es_block,
                es_by_tavily_block=es_by_tavily_block,
                tavily_block=tavily_block,
                chat_block=chat_block
            )

            messages = [
                {"role": "system", "content": RESEARCH_SYSTEM_PROMPT},
                {"role": "user", "content": research_prompt}
            ]
            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ prompt_logs ---
            if db and thread_id and user_id:
                try:
                    from app.models import PromptLog
                    db.add(PromptLog(
                        thread_id=thread_id,
                        user_id=user_id,
                        system_prompt=RESEARCH_SYSTEM_PROMPT,
                        user_prompt=research_prompt,
                        message_id=message_id
                    ))
                    db.commit()
                except Exception as e:
                    self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ prompt_log: {str(e)}", LogLevel.ERROR)
            response = await self.deepseek_service.chat_completion(messages)
            content, reasoning_content = self.get_response_content(response)
            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ research_results ---
            if db and thread_id:
                try:
                    from app.models import ResearchResult as ResearchResultModel
                    db.add(ResearchResultModel(
                        thread_id=thread_id,
                        query=query,
                        findings=str({
                            'queries': queries,
                            'es_results': es_results,
                            'tavily_results': tavily_results
                        }),
                        analysis=content
                    ))
                    db.commit()
                except Exception as e:
                    self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ research_result: {str(e)}", LogLevel.ERROR)

            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–≤–µ—Ç –≤ .json ---
            if hasattr(self, 'logger') and hasattr(self.logger, 'save_prompt'):
                try:
                    self.logger.save_prompt(messages, query, parameters={"thread_id": thread_id, "user_id": user_id})
                except Exception as e:
                    self.logger.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}", LogLevel.ERROR)
            if hasattr(self, 'logger') and hasattr(self.logger, 'save_response'):
                try:
                    self.logger.save_response({"result": content, "reasoning": reasoning_content}, query)
                except Exception as e:
                    self.logger.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", LogLevel.ERROR)

            return ResearchResult(
                query=query,
                analysis=content,
                timestamp=self._get_timestamp(),
                reasoning_content=reasoning_content
            )

        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}", LogLevel.ERROR)
            return ResearchResult(
                query=query,
                analysis="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                error=str(e),
                timestamp=self._get_timestamp(),
                reasoning_content=None
            )

    def _format_es_results(self, results: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ElasticSearch."""
        self.logger.log(f"[ES] –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}", LogLevel.INFO)
        if not results:
            self.logger.log("[ES] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", LogLevel.WARNING)
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞."
        formatted = []
        for idx, r in enumerate(results):
            text = ensure_correct_encoding(str(r.get("text", "")))
            title = ensure_correct_encoding(str(r.get("title", "")))
            score = r.get("score", 0)
            highlights = r.get("highlights", [])
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.logger.log(f"[ES] –†–µ–∑—É–ª—å—Ç–∞—Ç {idx+1}: title='{title}', score={score}, highlights={len(highlights)}", LogLevel.DEBUG)
            if text:
                result_parts = []
                if title:
                    result_parts.append(f"–î–æ–∫—É–º–µ–Ω—Ç: {title}")
                result_parts.append(f"–¢–µ–∫—Å—Ç: {text}")
                if highlights:
                    highlight_text = "\n".join(highlights)
                    result_parts.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã: {highlight_text}")
                result_parts.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f}")
                formatted.append("\n".join(result_parts))
        if not formatted:
            self.logger.log("[ES] –ü–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", LogLevel.WARNING)
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞."
        formatted.sort(key=lambda x: float(x.split("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:")[-1].strip() or "0"), reverse=True)
        formatted = formatted[:10]
        final_text = "\n\n" + "=" * 80 + "\n\n".join(formatted)
        if len(final_text) > 15000:
            final_text = truncate_text_intelligently(final_text, 15000)
        self.logger.log(f"[ES] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤", LogLevel.INFO)
        return final_text
        
    def _format_tavily_results(self, queries: List[str], results: List[List[Dict]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Tavily."""
        if not queries or not results or not isinstance(results, list):
            self.logger.log("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Tavily –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", LogLevel.WARNING)
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        self.logger.log(f"[TAVILY] –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}", LogLevel.INFO)
        self.logger.log(f"[TAVILY] –ü–æ–ª—É—á–µ–Ω–æ —Å–ø–∏—Å–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}", LogLevel.INFO)
        blocks = []
        for i, (query, result_list) in enumerate(zip(queries, results)):
            self.logger.log(f"[TAVILY] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {query}", LogLevel.INFO)
            self.logger.log(f"[TAVILY] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result_list)}", LogLevel.INFO)
            if result_list and isinstance(result_list, list):
                sorted_results = sorted(
                    result_list,
                    key=lambda x: float(x.get("score", 0)),
                    reverse=True
                )
                formatted_results = []
                for idx, r in enumerate(sorted_results):
                    title = r.get("title", "").strip()
                    body = r.get("body", r.get("content", "")).strip()
                    url = r.get("href", r.get("url", "")).strip()
                    source = r.get("source", "").strip()
                    score = r.get("score", 0)
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    self.logger.log(f"[TAVILY] –†–µ–∑—É–ª—å—Ç–∞—Ç {idx+1}: title='{title}', score={score}, url='{url}'", LogLevel.DEBUG)
                    if body:
                        result_parts = []
                        if title:
                            result_parts.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                        result_parts.append(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {body}")
                        if url:
                            result_parts.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {url}")
                        if source:
                            result_parts.append(f"–î–æ–º–µ–Ω: {source}")
                        result_parts.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f}")
                        formatted_results.append("\n".join(result_parts))
                if formatted_results:
                    content = "\n\n".join(formatted_results[:5])
                    blocks.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}':\n{content}")
        if not blocks:
            self.logger.log("[TAVILY] –ü–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", LogLevel.WARNING)
            return "–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        final_text = "\n\n" + "=" * 80 + "\n\n".join(blocks)
        self.logger.log(f"[TAVILY] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤", LogLevel.INFO)
        return final_text
        
    def _format_chat_history(self, history: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç.
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ª–æ–≥–∞.
        Args:
            history: JSON —Å—Ç—Ä–æ–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            [{"role": "user"/"assistant", "content": "text"}]
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        """
        if not history:
            return ""
            
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ JSON
            if isinstance(history, str):
                try:
                    messages = json.loads(history)
                except json.JSONDecodeError:
                    self.logger.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∫–∞–∫ JSON", LogLevel.ERROR)
                    return ""
            else:
                messages = history

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            if not isinstance(messages, list):
                self.logger.log("‚ùå –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º", LogLevel.ERROR)
                return ""

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
            formatted_messages = []
            for msg in messages[-5:]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(msg, dict):
                    role = msg.get("role", "")
                    content = msg.get("content", "").strip()
                    if role and content:
                        prefix = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" if role == "assistant" else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        formatted_messages.append(f"{prefix}: {content}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            formatted_history = "\n\n".join(formatted_messages)

            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º
            if len(formatted_history) > 5000:
                formatted_history = truncate_text_intelligently(formatted_history, 5000)

            self.logger.log(f"üìù –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(formatted_history)} —Å–∏–º–≤–æ–ª–æ–≤", LogLevel.INFO)
            return formatted_history

        except Exception as e:
            self.logger.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}", LogLevel.ERROR)
            return ""
        
    def _format_es_results_by_tavily(self, queries: list, results_by_query: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ElasticSearch –ø–æ —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º Tavily."""
        if not queries or not results_by_query:
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º."
        blocks = []
        for i, (query, results) in enumerate(zip(queries, results_by_query)):
            content = "\n".join([
                ensure_correct_encoding(str(r.get("text", "")))
                for r in results
            ])[:8000]
            blocks.append(f"–£—Ç–æ—á–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}: {query}\n{content}")
        return "\n\n".join(blocks)

    def _build_research_prompt(
        self,
        query: str,
        es_block: str,
        es_by_tavily_block: str,
        tavily_block: str,
        chat_block: str
    ) -> str:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
        –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
        """
        parts = []
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        parts.append(f"–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{query}\n")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_block:
            parts.append(f"–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:\n{chat_block}\n")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ
        if es_block and es_block != "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.":
            parts.append(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –í –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–ï:\n{es_block}\n")
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
        if es_by_tavily_block and es_by_tavily_block != "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º.":
            parts.append(f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ó –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–ê:\n{es_by_tavily_block}\n")
        
        # 5. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        if tavily_block and tavily_block != "–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.":
            parts.append(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –í –ò–ù–¢–ï–†–ù–ï–¢–ï:\n{tavily_block}\n")
        
        # 6. –î–æ–±–∞–≤–ª—è–µ–º LEGAL_SYSTEM_PROMPT –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        parts.append(LEGAL_SYSTEM_PROMPT)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        return "\n" + "=" * 80 + "\n\n".join(parts)

    def read_document(self, file_path: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
            
        Args:
            file_path: –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                    
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            self.logger.log(
                f"[DeepResearch #{self.usage_counter}] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_path}", LogLevel.INFO
            )
            extracted_text = extract_text_from_any_document(file_path)

            if extracted_text:
                self.logger.log(
                    f"[DeepResearch #{self.usage_counter}] –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç ({len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤)", LogLevel.INFO
                )
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
                max_length = 30000
                if len(extracted_text) > max_length:
                    extracted_text = extracted_text[:max_length] + "...[—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞]"

                return extracted_text

            return None
        except Exception as e:
            self.logger.log(
                f"[DeepResearch #{self.usage_counter}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_path}: {str(e)}", LogLevel.ERROR
            )
            return None

    def _get_timestamp(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."""
        return datetime.now().strftime("%Y%m%d_%H%M%S")

    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ."""
        return datetime.now().isoformat()
