import os
import sys
import json
import asyncio
import logging
from typing import Dict, Optional, Any, List
from pathlib import Path
from datetime import datetime
from app.handlers.user_doc_request import extract_text_from_any_document
from app.handlers.deepresearch_audit import audit_deepresearch, deepresearch_audit
from app.services.deepseek_service import DeepSeekService

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from app.config import DEEPSEEK_API_KEY, DEEPSEEK_MODEL

# üìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ third_party –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ shandu
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
THIRD_PARTY_DIR = os.path.join(BASE_DIR, "third_party")
if THIRD_PARTY_DIR not in sys.path:
    sys.path.insert(0, THIRD_PARTY_DIR)

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s"
)

class ResearchResult:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, query: str, analysis: str, timestamp: str, error: Optional[str] = None):
        self.query = query
        self.analysis = analysis
        self.timestamp = timestamp
        self.error = error
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            "query": self.query,
            "analysis": self.analysis,
            "timestamp": self.timestamp,
            "error": self.error
        }
    
    def save_to_file(self, filepath: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª."""
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.to_dict(), f, ensure_ascii=False, indent=2)

class DeepResearchService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Shandu –∏ DeepSeek API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    
    def __init__(self, output_dir: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
        """
        self.output_dir = output_dir or "research_results"
        os.makedirs(self.output_dir, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DeepSeek —Å–µ—Ä–≤–∏—Å
        self.deepseek_service = DeepSeekService(
            api_key=DEEPSEEK_API_KEY,
            model=DEEPSEEK_MODEL,
            temperature=0.7,  # –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            max_tokens=8000,
            timeout=120
        )
            
        logging.info(f"DeepResearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.output_dir}")
        
        # –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.usage_counter = 0

    def filter_suspicious_court_numbers(self, text: str) -> str:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        import re
        
        # –®–∞–±–ª–æ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–µ–ª
        suspicious_patterns = [
            r'–ê\d+-\d{6}/\d{4}',  # –®–∞–±–ª–æ–Ω –≤–∏–¥–∞ –ê40-123456/2019
            r'–ê\d+-\d{5,6}/\d{4}',  # –®–∞–±–ª–æ–Ω—ã —Å 5-6 —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –Ω–æ–º–µ—Ä–µ
        ]
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        def is_suspicious_sequence(num_str):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (123456, 654321)
            sequential_up = '0123456789'
            sequential_down = '9876543210'
            for i in range(len(num_str) - 2):
                if num_str[i:i+3] in sequential_up or num_str[i:i+3] in sequential_down:
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏—Ñ—Ä—ã (111, 222)
            for i in range(len(num_str) - 2):
                if num_str[i] == num_str[i+1] == num_str[i+2]:
                    return True
            
            return False
        
        # –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–µ–ª
        for pattern in suspicious_patterns:
            matches = re.finditer(pattern, text)
            for match in matches:
                court_num = match.group(0)
                num_part = re.search(r'\d+', court_num).group(0)
                
                # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
                if is_suspicious_sequence(num_part) or len(num_part) >= 6:
                    replacement = "—Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–æ–∂–∏–≤—à–µ–π—Å—è —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ"
                    text = text.replace(court_num, replacement)
        
        return text

    @audit_deepresearch
    async def research(self, query: str, additional_context: Optional[List[Dict]] = None) -> ResearchResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DeepSeek API.
        
        Args:
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            additional_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    
        Returns:
            ResearchResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        """
        self.usage_counter += 1
        logging.info(f"[DeepResearch #{self.usage_counter}] –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {len(query)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ query - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if isinstance(query, str) and (query.endswith('.docx') or query.endswith('.pdf')):
            query = self.read_document(query) or query
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            system_prompt = ("–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É. "
                        "–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ. "
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –≤—ã–¥–µ–ª—è—è –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã, "
                        "—Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ. "
                        "\n\n–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:"
                        "\n1. –ù–ò–ö–û–ì–î–ê –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê40-123456/2019, –ê40-123123/2020, –ê40-123321/2022 –∏ —Ç.–ø.)."
                        "\n2. –ù–ò–ö–û–ì–î–ê –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª."
                        "\n3. –ü—Ä–∏ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ª–∏–±–æ:"
                        "\n   –∞) —Å—Å—ã–ª–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤,"
                        "\n   –±) –ª–∏–±–æ —É–∫–∞–∑—ã–≤–∞–π –æ–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å—É–¥–µ–±–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–µ–ª–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –í–° –†–§...\" –∏–ª–∏ \"–í —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Å–ª–æ–∂–∏–ª—Å—è –ø–æ–¥—Ö–æ–¥...\")."
                        "\n4. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –≤–∏–¥–∞ \"–ê40-XXXXXX/YYYY\", –≥–¥–µ XXXXXX - —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ, –∞ YYYY - –≥–æ–¥, –µ—Å–ª–∏ —Ç—ã –µ–≥–æ –ø—Ä–∏–¥—É–º–∞–ª."
                        "\n\n–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞ - –ù–ï –£–ö–ê–ó–´–í–ê–ô –µ–≥–æ –≤–æ–æ–±—â–µ.")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            user_prompt = f"–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:\n\n{query}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if additional_context:
                user_prompt += "\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
                for ctx in additional_context:
                    source_type = ctx.get("type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                    if ctx.get("found"):
                        user_prompt += f"\n--- –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_type} ---\n"
                        if "data" in ctx:
                            if isinstance(ctx["data"], list):
                                for item in ctx["data"][:3]:  # –ë–µ—Ä–µ–º –¥–æ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                    user_prompt += f"{item[:1000]}...\n\n"
                            elif isinstance(ctx["data"], dict):
                                for key, value in ctx["data"].items():
                                    if key not in ["path", "error", "type"]:
                                        user_prompt += f"{value[:1000]}...\n\n"
                            else:
                                user_prompt += f"{str(ctx['data'])[:3000]}...\n\n"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek API
            analysis = await self.deepseek_service.generate_with_system(system_prompt, user_prompt)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª
            filtered_analysis = self.filter_suspicious_court_numbers(analysis)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = ResearchResult(
                query=query[:1000] + "..." if len(query) > 3000 else query,
                analysis=filtered_analysis,
                timestamp=self._get_current_time()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if self.output_dir:
                result_filename = f"research_{self.usage_counter}_{self._get_timestamp()}.json"
                result_path = os.path.join(self.output_dir, result_filename)
                result.save_to_file(result_path)
            
            return result
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}"
            logging.error(f"[DeepResearch #{self.usage_counter}] {error_msg}")
            return ResearchResult(
                query=query[:5000] + "..." if len(query) > 5000 else query,
                analysis=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}",
                timestamp=self._get_current_time(),
                error=str(e)
            )

    @audit_deepresearch
    def read_document(self, file_path: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
            
        Args:
            file_path: –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                    
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            logging.info(f"[DeepResearch #{self.usage_counter}] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_path}")
            extracted_text = extract_text_from_any_document(file_path)
                
            if extracted_text:
                logging.info(f"[DeepResearch #{self.usage_counter}] –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç ({len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
                max_length = 50000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–µ–π
                if len(extracted_text) > max_length:
                    extracted_text = extracted_text[:max_length] + "...[—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞]"
                        
                return extracted_text
                
            return None
        except Exception as e:
            logging.error(f"[DeepResearch #{self.usage_counter}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_path}: {str(e)}")
            return None  


    @audit_deepresearch
    def _get_timestamp(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."""
        return datetime.now().strftime("%Y%m%d_%H%M%S")
        

    @audit_deepresearch
    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ."""
        return datetime.now().isoformat()