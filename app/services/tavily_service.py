"""
–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tavily API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, —Ç–∞–∫ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫.
"""
import os
import logging
import aiohttp
import json
import requests
from typing import List, Dict, Optional, Literal
from app.config import TAVILY_API_KEY
from app.services.query_optimizer import QueryOptimizer
from app.utils import ensure_correct_encoding
from app.utils.logger import get_logger, LogLevel

logger = get_logger()

class TavilyService:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(TavilyService, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not hasattr(self, 'initialized'):
            self.api_key = TAVILY_API_KEY
            self.api_base = "https://api.tavily.com/v1/search"
            self.query_optimizer = QueryOptimizer()
            self.default_domains = [
                "consultant.ru",
                "garant.ru",
                "sudact.ru",
                "kad.arbitr.ru",
                "ras.arbitr.ru",
                "vsrf.ru",
                "pravo.gov.ru"
            ]
            self.initialized = True
    
    async def search(
        self,
        query: str,
        max_results: int = 10,
        optimize: bool = True,
        search_depth: Literal["basic", "advanced"] = "advanced",
        include_domains: Optional[List[str]] = None,
        include_raw_content: bool = True
    ) -> List[Dict]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily API —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            optimize: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ DeepSeek
            search_depth: –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ ("basic" –∏–ª–∏ "advanced")
            include_domains: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            include_raw_content: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
            query = ensure_correct_encoding(query)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if optimize:
                query = await self.query_optimizer.optimize_query(query)
                logger.log(f"üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query}", LogLevel.INFO)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload
            payload = {
                "query": query,
                "search_depth": search_depth,
                "max_results": max_results,
                "include_domains": include_domains or self.default_domains,
                "include_raw_content": include_raw_content,
                "api_key": self.api_key
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with aiohttp.ClientSession() as session:
                headers = {"Content-Type": "application/json"}
                
                async with session.post(
                    self.api_base,
                    headers=headers,
                    json=payload,
                    timeout=30
                ) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.log(f"‚ùå –û—à–∏–±–∫–∞ Tavily API ({response.status}): {error_text}", LogLevel.ERROR)
                        return []
                    
                    data = await response.json()
                    results = data.get("results", [])
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    formatted_results = []
                    for result in results:
                        if not result.get("url") or not result.get("content"):
                            continue
                        
                        formatted_result = {
                            "title": result.get("title", ""),
                            "href": result.get("url"),
                            "body": result.get("content"),
                            "score": result.get("score", 0),
                            "source": result.get("domain"),
                            "metadata": {
                                "published_date": result.get("published_date"),
                                "word_count": len(result.get("content", "").split()),
                                "domain": result.get("domain"),
                                "optimized_query": query if optimize else None
                            }
                        }
                        formatted_results.append(formatted_result)
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    formatted_results.sort(key=lambda x: x.get("score", 0), reverse=True)
                    
                    logger.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Tavily API", LogLevel.INFO)
                    return formatted_results[:max_results]
                    
        except Exception as e:
            logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Tavily: {str(e)}", LogLevel.ERROR)
            return []
    
    def sync_search(
        self,
        query: str,
        max_results: int = 10,
        search_depth: Literal["basic", "advanced"] = "basic",
        include_domains: Optional[List[str]] = None
    ) -> List[Dict]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            search_depth: –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞
            include_domains: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload
            payload = {
                "query": query,
                "search_depth": search_depth,
                "max_results": max_results,
                "include_domains": include_domains or self.default_domains,
                "api_key": self.api_key
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                self.api_base,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code != 200:
                logger.log(f"‚ùå –û—à–∏–±–∫–∞ Tavily API ({response.status_code}): {response.text}", LogLevel.ERROR)
                return []
            
            results = response.json().get("results", [])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            formatted_results = [
                {"href": obj["url"], "body": obj["content"]}
                for obj in results
                if obj.get("url") and obj.get("content")
            ]
            
            logger.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", LogLevel.INFO)
            return formatted_results
            
        except Exception as e:
            logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ –≤ Tavily: {str(e)}", LogLevel.ERROR)
            return [] 