import google.generativeai as genai
import os
import base64  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏–µ–π 0.3.1
import logging
import asyncio
import tempfile
import shutil  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
import time  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
import aiofiles  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from typing import Optional, Dict, Any, List, Tuple

# –ò–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π Google API
from google.api_core import exceptions as google_exceptions

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç PyMuPDF
try:
    import fitz
except ImportError:
    logging.error("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. OCR –¥–ª—è PDF –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    fitz = None

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ app.config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç GEMINI_API_KEY –∏ GEMINI_MODEL
try:
    from app.config import GEMINI_API_KEY, GEMINI_MODEL
except ImportError:
    logging.error(
        "‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: app.config –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    )
    # –ó–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è config (–¥–ª—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏)
    GEMINI_API_KEY = os.getenv(
        "GEMINI_API_KEY")  # –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ env –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    GEMINI_MODEL = os.getenv(
        "GEMINI_MODEL", "gemini-1.5-flash-latest")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logging.warning(
        "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è app.config"
    )

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TEMP_FOLDER = "temp_processing"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ PyMuPDF
# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
if not os.path.exists(TEMP_FOLDER):
    try:
        os.makedirs(TEMP_FOLDER, exist_ok=True)
        logging.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {TEMP_FOLDER}")
    except Exception as e:
        logging.error(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {TEMP_FOLDER}: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (OCR)
OCR_GENERATION_CONFIG = {
    "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    "max_output_tokens":
    4096,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ –º–∞–∫—Å–∏–º—É–º–∞ –º–æ–¥–µ–ª–∏, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    "top_p": 0.95,
    "top_k": 40
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
OCR_SAFETY_SETTINGS = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: HARM_CATEGORY_DANGEROUS_CONTENT
]

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è OCR (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)
OCR_PROMPTS = [
    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
    "–ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
    "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.",
]

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ)
BYPASS_PROMPTS = [
    "¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–∏–º–≤–æ–ª—ã¬ª.",
]

import pytesseract
from PIL import Image
import io

class GeminiService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API –¥–ª—è OCR –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Gemini API."""
        self.api_key = GEMINI_API_KEY
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.model_name = GEMINI_MODEL
        self.initialized = False
        self.model: Optional[genai.GenerativeModel] = None
        self.use_tesseract_fallback = True  # –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Tesseract –∫–∞–∫ fallback

        if not self.api_key:
            logging.warning(
                "‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel(self.model_name)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
            # self.model.generate_content("ping") # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

            logging.info(
                f"‚úÖ Gemini API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {self.model_name}"
            )
            self.initialized = True
        except google_exceptions.GoogleAPIError as e:
            logging.error(
                f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API (GoogleAPIError): {e}",
                exc_info=True)
        except Exception as e:
            logging.error(
                f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {str(e)}",
                exc_info=True)

    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –µ—Å—Ç—å –∏ –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        return self.initialized and self.model is not None

    # Removed _get_image_base64 as it's not used and contains blocking I/O

    async def _call_gemini_vision_api(
            self,
            contents: List[Any],
            generation_config: Optional[Dict[str, Any]] = None,
            safety_settings: Optional[List[Dict[str, str]]] = None,
            timeout: float = 180.0  # –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 180 —Å–µ–∫
    ) -> Dict[str, Any]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ Gemini Vision API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        if not self.is_available():
            return {"success": False, "error": "Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

        try:
            logging.info(
                f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API ({self.model_name})...")
            # –í –≤–µ—Ä—Å–∏–∏ 0.3.1 –Ω–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    self.model.generate_content,
                    contents=contents,
                    generation_config=generation_config
                    or OCR_GENERATION_CONFIG,
                    safety_settings=safety_settings or OCR_SAFETY_SETTINGS
                ),
                timeout=timeout
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - –≤ –≤–µ—Ä—Å–∏–∏ 0.3.1 –¥—Ä—É–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
            if hasattr(response, "error") and response.error:
                logging.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {response.error}")
                return {
                    "success": False,
                    "error": f"–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {response.error}",
                    "block_reason": "SAFETY"
                }

            # –í –≤–µ—Ä—Å–∏–∏ 0.3.1 –¥—Ä—É–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
            # –£ –Ω–∞—Å –Ω–µ—Ç candidates –∏ finish_reason –∫–∞–∫ –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ - –≤ –≤–µ—Ä—Å–∏–∏ 0.3.1 –¥—Ä—É–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            if response and isinstance(response, str):
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
                logging.info("‚úÖ Gemini API –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç (—Å—Ç—Ä–æ–∫–∞).")
                return {"success": True, "text": response}
            elif hasattr(response, "text"):
                try:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç text
                    if response.text and response.text.strip():
                        logging.info("‚úÖ Gemini API –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç (–æ–±—ä–µ–∫—Ç).")
                        return {"success": True, "text": response.text}
                except (AttributeError, IndexError) as e:
                    logging.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            elif hasattr(response,
                         "prompt_feedback") and response.prompt_feedback:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –ø—Ä–æ–º–ø—Ç—É (–º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É)
                feedback_msg = str(response.prompt_feedback)
                logging.warning(
                    f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç API: {feedback_msg}")
                return {
                    "success": False,
                    "error": f"–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {feedback_msg}",
                    "block_reason": "SAFETY"
                }
            elif hasattr(response, "candidates") and response.candidates:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏)
                for candidate in response.candidates:
                    if hasattr(candidate, "content") and candidate.content:
                        try:
                            parts = None
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ parts
                            if hasattr(candidate.content, "parts"):
                                parts = candidate.content.parts
                                if parts and len(parts) > 0:
                                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ parts
                                    if hasattr(parts[0], "text"):
                                        text = parts[0].text
                                    else:
                                        text = str(parts[0])
                                else:
                                    text = str(candidate.content)
                            else:
                                text = str(candidate.content)

                            if text and text.strip():
                                logging.info(
                                    "‚úÖ Gemini API –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç (–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)."
                                )
                                return {"success": True, "text": text}
                        except (AttributeError, IndexError) as e:
                            logging.warning(
                                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
                            continue

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—å –∫–∞–∫—É—é-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                response_str = str(response)
                if response_str and "error" not in response_str.lower():
                    logging.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.")
                    text_content = response_str

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logging.info(f"üìè –†–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                    if len(text_content) > 100:
                        logging.info(f"üî¨ –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: '{text_content[:100]}...'")
                        logging.info(f"üî¨ –ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞: '...{text_content[-100:]}'")

                    return {"success": True, "text": text_content}
            except Exception as e:
                logging.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: {e}"
                )

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
            logging.warning("‚ö†Ô∏è Gemini API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç.")
            return {"success": False, "error": "Gemini API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç."}

        except asyncio.TimeoutError:
            logging.warning(
                f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API ({timeout} —Å–µ–∫).")
            return {
                "success": False,
                "error": f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API ({timeout} —Å–µ–∫)."
            }
        except Exception as e:
            if "BlockedContent" in str(e) or "blocked" in str(e).lower():
                logging.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {e}")
                return {
                    "success": False,
                    "error": f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {e}",
                    "block_reason": "SAFETY"
                }
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {e}",
                              exc_info=True)
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {str(e)}"
                }
        except google_exceptions.RateLimitError as e:
            logging.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API: {e}")
            return {
                "success": False,
                "error":
                f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            }
        except google_exceptions.GoogleAPIError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini: {e}",
                          exc_info=True)
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {e}"
            }
        except Exception as e:
            logging.error(
                f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {str(e)}",
                exc_info=True)
            return {
                "success": False,
                "error":
                f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {str(e)}"
            }

    async def _extract_text_with_tesseract(self, image_bytes: bytes) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Tesseract OCR"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤
            image = Image.open(io.BytesIO(image_bytes))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Tesseract
            text = pytesseract.image_to_string(image, lang='rus+eng')
            
            if text and text.strip():
                logging.info("‚úÖ Tesseract OCR —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫ —Ç–µ–∫—Å—Ç")
                return {"success": True, "text": text.strip()}
            else:
                logging.warning("‚ö†Ô∏è Tesseract OCR –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
                return {"success": False, "error": "Tesseract OCR –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç"}
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Tesseract: {str(e)}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ Tesseract OCR: {str(e)}"}

    async def extract_text_from_image(
            self,
            file_bytes: bytes,
            mime_type: str,
            custom_prompt: Optional[str] = None,
            custom_timeout: float = 180.0) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini API –∏ fallback –Ω–∞ Tesseract"""
        if not self.is_available():
            return {"success": False, "error": "Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ Gemini
            result = await self._call_gemini_vision_api(
                contents=[{"mime_type": mime_type, "data": base64.b64encode(file_bytes).decode('utf-8')}],
                timeout=custom_timeout
            )

            # –ï—Å–ª–∏ Gemini –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –∏–ª–∏ –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏
            if not result["success"] and self.use_tesseract_fallback:
                logging.warning("‚ö†Ô∏è Gemini –æ—Ç–∫–∞–∑–∞–ª –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–±—É–µ–º Tesseract OCR...")
                return await self._extract_text_with_tesseract(file_bytes)

            return result

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            if self.use_tesseract_fallback:
                logging.warning("‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º Tesseract OCR –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...")
                return await self._extract_text_with_tesseract(file_bytes)
            return {"success": False, "error": str(e)}

    async def _extract_text_from_pdf_text_layer_async(
            self, pdf_bytes: bytes) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞.
        """
        if fitz is None:
            return {"success": False, "error": "PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."}

        try:
            # fitz.open –∏ get_text() –º–æ–≥—É—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º–∏
            def extract_sync():
                doc = fitz.open("pdf", pdf_bytes)
                combined_text = ""
                page_count = len(doc)

                # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ get_text() –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                for page_num in range(page_count):
                    page = doc[page_num]
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                    text = page.get_text()  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
                    combined_text += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num+1} ---\n"
                    combined_text += text

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    try:
                        tables_text = page.get_text("blocks")
                        if tables_text and isinstance(tables_text, list) and len(tables_text) > 0:
                            tables_extracted = "\n".join([str(block[4]) for block in tables_text if block[0] == 1])
                            if tables_extracted and len(tables_extracted) > 10:  # –ï—Å–ª–∏ –∏–∑–≤–ª–µ–∫–ª–∏ –ø–æ–ª–µ–∑–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                                combined_text += "\n--- –¢–∞–±–ª–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ---\n"
                                combined_text += tables_extracted
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {e}")

                # –ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü–µ–ª–∏–∫–æ–º
                try:
                    full_text = ""
                    for page in doc:
                        full_text += page.get_text()
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                    full_text = combined_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π
                if len(full_text) > len(combined_text):
                    final_text = full_text
                    logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ)")
                else:
                    final_text = combined_text
                    logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (–±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ)")

                doc.close()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç
                return final_text

            text = await asyncio.to_thread(extract_sync)

            if text and text.strip():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–∑–∞–º–µ—Ç–Ω—ã–π" –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤)
                if len(text.strip()) > 100:
                    logging.info(
                        f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF. –°–∏–º–≤–æ–ª–æ–≤: {len(text)}"
                    )
                    return {"success": True, "text": text}
                else:
                    logging.info(
                        f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –∏–∑–≤–ª–µ—á–µ–Ω, –Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤). –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è OCR."
                    )

            logging.info("üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª –≤ PDF.")
            return {
                "success": False,
                "error": "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª."
            }

        except Exception as e:
            logging.warning(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è —Å –ø–æ–º–æ—â—å—é PyMuPDF: {str(e)}",
                exc_info=True)
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ PyMuPDF: {str(e)}"}

    async def _extract_text_from_pdf_direct_api_async(
            self, pdf_bytes: bytes) -> Dict[str, Any]:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é Gemini API.
        """
        pdf_size_mb = len(pdf_bytes) / (1024 * 1024)
        
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º PDF –≤ base64
            encoded_pdf = base64.b64encode(pdf_bytes).decode('utf-8')
            
            # –°–æ–∑–¥–∞–µ–º multimodal –∫–æ–Ω—Ç–µ–Ω—Ç
            contents = [
                {
                    "mime_type": "application/pdf",
                    "data": encoded_pdf
                },
                """–ò–∑–≤–ª–µ–∫–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞. 
                –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ:
                1. –ù—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
                2. –ó–∞–≥–æ–ª–æ–≤–∫–∞–º –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                3. –¢–∞–±–ª–∏—Ü–∞–º –∏ —Å–ø–∏—Å–∫–∞–º
                4. –î–∞—Ç–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                5. –ü–æ–¥–ø–∏—Å—è–º –∏ –ø–µ—á–∞—Ç—è–º
                6. –í—Å–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º —Ç–µ—Ä–º–∏–Ω–∞–º –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º
                
                –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
                """
            ]

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_config = {
                "temperature": 0.1,
                "max_output_tokens": 32768,
                "top_p": 0.95,
                "top_k": 40
            }

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            timeout = 600.0 if pdf_size_mb >= 20 else 180.0

            logging.info(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ Gemini API (—Ä–∞–∑–º–µ—Ä: {pdf_size_mb:.2f} –ú–ë, —Ç–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫)")
            result = await self._call_gemini_vision_api(
                contents, 
                timeout=timeout,
                generation_config=generation_config
            )

            if result["success"]:
                text_length = len(result.get("text", ""))
                expected_min_chars = pdf_size_mb * 10000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 10000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ 1 –ú–ë
                
                if text_length < expected_min_chars:
                    logging.warning(
                        f"‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º: {text_length} —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞ {pdf_size_mb:.2f} –ú–ë"
                    )
                    logging.warning(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {int(expected_min_chars)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                    contents_alt = [
                        {
                            "mime_type": "application/pdf",
                            "data": encoded_pdf
                        },
                        """–≠—Ç–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç. –ò–∑–≤–ª–µ–∫–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
                        –í–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏, —Ü–∏—Ñ—Ä—ã, –¥–∞—Ç—ã, –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏.
                        –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º —Ç–µ—Ä–º–∏–Ω–∞–º –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º."""
                    ]
                    
                    alt_result = await self._call_gemini_vision_api(
                        contents_alt,
                        timeout=timeout,
                        generation_config=generation_config
                    )
                    
                    if alt_result["success"] and len(alt_result.get("text", "")) > text_length:
                        logging.info(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–∞–ª –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞: {len(alt_result.get('text', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        alt_result["output_path"] = os.path.abspath(os.path.join("output_documents", f"{os.path.splitext(os.path.basename(result.get('filename', 'output')))[0]}_recognized.txt"))
                        return alt_result
                
                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω PDF ({pdf_size_mb:.2f} –ú–ë)")
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                result["output_path"] = os.path.abspath(os.path.join("output_documents", f"{os.path.splitext(os.path.basename(result.get('filename', 'output')))[0]}_recognized.txt"))
                return result
            else:
                logging.warning(f"‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return {
                    "success": False,
                    "error": f"Gemini –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF —Ä–∞–∑–º–µ—Ä–æ–º {pdf_size_mb:.2f} –ú–ë: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                }

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF ({pdf_size_mb:.2f} –ú–ë): {str(e)}"
            }

    async def _extract_text_from_pdf_page_ocr_async(
            self, pdf_bytes: bytes, thread_id: str = None) -> Dict[str, Any]:
        """
        –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Gemini OCR.
        """
        if fitz is None:
            return {
                "success": False,
                "error": "PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            }
        if not self.is_available():
            return {
                "success": False,
                "error": "Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            }

        start_time = time.time()
        status_updates = []

        def add_status(message: str, progress: float):
            current_time = time.time() - start_time
            status = {
                "message": message,
                "progress": progress,
                "time_elapsed": current_time
            }
            status_updates.append(status)
            return status

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å
            add_status("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞", 0)

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü
            temp_dir = os.path.join(
                TEMP_FOLDER,
                f"pdf_pages_{os.getpid()}_{id(self)}_{int(time.time())}")
            os.makedirs(temp_dir, exist_ok=True)
            
            add_status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü", 5)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            doc = await asyncio.to_thread(fitz.open, "pdf", pdf_bytes)
            max_pages = min(50, doc.page_count)
            total_pages_to_process = max_pages
            
            add_status(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {doc.page_count} —Å—Ç—Ä–∞–Ω–∏—Ü, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {max_pages}", 10)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            temp_image_paths = []
            for page_num in range(max_pages):
                try:
                    page = doc.load_page(page_num)
                    pix = page.get_pixmap(matrix=fitz.Matrix(2.0, 2.0))
                    temp_img_path = os.path.join(temp_dir, f"page_{page_num:04d}.png")
                    await asyncio.to_thread(pix.save, temp_img_path)
                    temp_image_paths.append(temp_img_path)
                    progress = 10 + (30 * (page_num + 1) / max_pages)
                    add_status(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} –∏–∑ {max_pages}", progress)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {str(e)}")

            await asyncio.to_thread(doc.close)

            if not temp_image_paths:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è OCR.",
                    "status_updates": status_updates
                }

            add_status("–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞", 40)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Gemini
            combined_text = []
            success_count = 0

            for page_num, img_path in enumerate(temp_image_paths):
                try:
                    async with aiofiles.open(img_path, "rb") as img_file:
                        img_bytes = await img_file.read()

                    ocr_result = await self._call_gemini_vision_api(
                        contents=[{
                            "mime_type": "image/png",
                            "data": base64.b64encode(img_bytes).decode('utf-8')
                        }],
                        timeout=60.0
                    )

                    if ocr_result["success"] and ocr_result.get("text", "").strip():
                        combined_text.append(f"\n\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n\n")
                        combined_text.append(ocr_result["text"].strip())
                        success_count += 1
                        progress = 40 + (50 * (page_num + 1) / len(temp_image_paths))
                        add_status(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} –∏–∑ {len(temp_image_paths)}", progress)
                    else:
                        add_status(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}", progress)

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {str(e)}")
                    add_status(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {str(e)}", progress)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if success_count > 0:
                final_text = "".join(combined_text)
                end_time = time.time()
                total_time = end_time - start_time
                
                result = {
                    "success": True,
                    "text": final_text,
                    "pages_processed": total_pages_to_process,
                    "pages_success": success_count,
                    "processing_time": total_time,
                    "status_updates": status_updates
                }

                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω thread_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if thread_id:
                    try:
                        from app.models import Message
                        from app.database import get_db

                        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                        message_text = f"""–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {success_count}/{total_pages_to_process}
–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.1f} —Å–µ–∫—É–Ω–¥

[–°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç](/download/{thread_id}/latest)"""

                        async with get_db() as db:
                            message = Message(
                                thread_id=thread_id,
                                role="assistant",
                                content=message_text,
                                metadata={
                                    "recognized_text": final_text,
                                    "processing_time": total_time,
                                    "pages_processed": total_pages_to_process,
                                    "pages_success": success_count
                                }
                            )
                            db.add(message)
                            await db.commit()
                            
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

                add_status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", 100)
                return result
            else:
                add_status("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", 100)
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
                    "status_updates": status_updates
                }

        except Exception as e:
            error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}"
            add_status(error_msg, 100)
            return {
                "success": False,
                "error": error_msg,
                "status_updates": status_updates
            }
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if os.path.exists(temp_dir):
                try:
                    await asyncio.to_thread(shutil.rmtree, temp_dir)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")

    async def extract_text_from_pdf(self, pdf_bytes: bytes, filename: str = None) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF.
        –ü—Ä–æ–±—É–µ—Ç –º–µ—Ç–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π, –ø—Ä—è–º–æ–π API, –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π OCR.
        """
        if not self.is_available() and fitz is None:
            return {
                "success": False,
                "error": "Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            }

        pdf_size_mb = len(pdf_bytes) / (1024 * 1024)
        logging.info(f"üìè –†–∞–∑–º–µ—Ä PDF: {pdf_size_mb:.2f} –ú–ë")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—É—Ç—è—Ö
        if filename:
            result = {"filename": filename}
        else:
            result = {}

        # –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 20 –ú–ë —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini
        if pdf_size_mb >= 20:
            logging.info("üìÑ –§–∞–π–ª –±–æ–ª—å—à–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ Gemini API")
            result.update(await self._extract_text_from_pdf_direct_api_async(pdf_bytes))
            if result.get("output_path"):
                logging.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {result['output_path']}")
            return result

        logging.info("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...")

        # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π —Å –ø–æ–º–æ—â—å—é PyMuPDF
        text_layer_result = await self._extract_text_from_pdf_text_layer_async(
            pdf_bytes)
        if text_layer_result["success"]:
            logging.info("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è —É—Å–ø–µ—à–Ω–æ.")
            return text_layer_result

        logging.info(
            "‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ—Ç–æ–¥–∞–º OCR (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç).")

        # 2. –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ —Å Gemini API
        direct_api_result = await self._extract_text_from_pdf_direct_api_async(
            pdf_bytes)
        if direct_api_result["success"]:
            logging.info("‚úÖ –ü—Ä—è–º–æ–π –º–µ—Ç–æ–¥ Gemini API —É—Å–ø–µ—à–Ω–æ.")
            return direct_api_result

        # 3. –ï—Å–ª–∏ –æ–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        page_ocr_result = await self._extract_text_from_pdf_page_ocr_async(
            pdf_bytes)
        if page_ocr_result["success"]:
            logging.info("‚úÖ –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π OCR —É—Å–ø–µ—à–Ω–æ.")
            return page_ocr_result

        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.")
        return {
            "success": False,
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."
        }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
gemini_service = GeminiService()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
# async def main():
#     # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å pdf_bytes –∏–ª–∏ img_bytes
#     # –î–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
#     # with open("test.pdf", "rb") as f:
#     #     pdf_bytes = f.read()
#     # result = await gemini_service.extract_text_from_pdf(pdf_bytes)
#     # print(result)

#     # with open("test.jpg", "rb") as f:
#     #      img_bytes = f.read()
#     # result = await gemini_service.extract_text_from_image(img_bytes, "image/jpeg")
#     # print(result)

# if __name__ == "__main__":
#     logging.basicConfig(level=logging.INFO)
#     # asyncio.run(main()) # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —Å–∫—Ä–∏–ø—Ç