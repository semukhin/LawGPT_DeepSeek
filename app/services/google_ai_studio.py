"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google AI Studio (Gemini) API.
–†–∞–Ω—å—à–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vertex AI,
—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
"""
import os
import logging
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from app.config import GEMINI_API_KEY, GEMINI_MODEL, GEMINI_API_ENABLED

import google.generativeai as genai
from google.generativeai import types

MODEL_NAME = "gemini-2.5-flash-preview-04-17"

genai.configure(api_key=GEMINI_API_KEY)

class GoogleAIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google AI Studio (Gemini) API.
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å Google AI —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        """
        self.enabled = GEMINI_API_ENABLED
        self.api_key = GEMINI_API_KEY
        self.model = MODEL_NAME
        self.client = genai.Client()

        logging.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google AI Studio: enabled={self.enabled}")
        logging.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: model={self.model}")

        if not self.enabled:
            logging.info("‚ö†Ô∏è Google AI Studio —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return

        if not self.api_key:
            logging.error("‚ùå API –∫–ª—é—á Google AI Studio –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            self.enabled = False
            return

        logging.info("‚úÖ Google AI Studio –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    async def analyze_document(self, document_bytes: bytes, document_type: Optional[str] = None, prompt: str = "Summarize this document") -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é Gemini (–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PDF).
        Args:
            document_bytes: PDF-—Ñ–∞–π–ª –≤ –±–∞–π—Ç–∞—Ö
            document_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (pdf, docx, xlsx –∏ —Ç.–¥.)
            prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        if not self.enabled:
            logging.warning("‚ö†Ô∏è Google AI Studio –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return {"text": None, "analysis": None}

        try:
            if document_type == 'pdf' or document_type is None:
                part = types.Part.from_bytes(data=document_bytes, mime_type='application/pdf')
                response = self.client.models.generate_content(
                    model=self.model,
                    contents=[part, prompt]
                )
                return {"text": response.text, "analysis": {"processed_by": "gemini"}}
            else:
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
                return {"text": None, "analysis": {"processed_by": "gemini"}}
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}", exc_info=True)
            return {"text": None, "analysis": {"error": str(e)}}
