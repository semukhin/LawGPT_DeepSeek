import time
import logging
from functools import wraps
import asyncio

def measure_time(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (async –∏ sync)."""
    print(f"üîç –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä

    @wraps(func)
    async def async_wrapper(*args, **kwargs):
        print(f"üöÄ –í—ã–∑–æ–≤ async-—Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
        start_time = time.perf_counter()
        result = await func(*args, **kwargs)
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        log_message = f"‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__} (async): {execution_time:.6f} —Å–µ–∫—É–Ω–¥"
        logging.info(log_message)
        print(log_message)  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        return result

    @wraps(func)
    def sync_wrapper(*args, **kwargs):
        print(f"üöÄ –í—ã–∑–æ–≤ sync-—Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        log_message = f"‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__} (sync): {execution_time:.6f} —Å–µ–∫—É–Ω–¥"
        logging.info(log_message)
        print(log_message)  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        return result

    return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper 