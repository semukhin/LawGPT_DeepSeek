"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —á–µ—Ä–µ–∑ WebSocket.
"""
import logging
import asyncio
from typing import List, Dict, Any
from app.websocket_state import connected_clients
from datetime import datetime
from starlette.websockets import WebSocketState


class WebSocketLogHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket."""
    
    def __init__(self):
        super().__init__()
        self.setLevel(logging.INFO)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
        self.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
        
    def emit(self, record):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if any(skip_term in record.getMessage() for skip_term in 
                ['HEAD http', 'GET http', 'POST http', 'OPTIONS http']):
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥
        log_entry = self.format(record)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        user_friendly_log = self._simplify_log(log_entry, record)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        if user_friendly_log:
            asyncio.create_task(self._send_to_clients(user_friendly_log))
    
    def _simplify_log(self, log_entry: str, record) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        msg = record.getMessage()
        
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if "–ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞:" in msg:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            symbols_count = msg.split("–î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: ")[1].split(" —Å–∏–º–≤–æ–ª–æ–≤")[0]
            return f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ({symbols_count} —Å–∏–º–≤–æ–ª–æ–≤)"
        elif "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ ElasticSearch" in msg:
            return "üîç –ü–æ–∏—Å–∫ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ..."
        elif "google_search: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫" in msg:
            return "üåê –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ..."
        elif "–ù–∞–π–¥–µ–Ω–æ" in msg and "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤" in msg:
            count = msg.split("–ù–∞–π–¥–µ–Ω–æ ")[1].split(" —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö")[0]
            return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {count} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        elif "–ó–∞–≥—Ä—É–∂–µ–Ω–æ" in msg and "–ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π" in msg:
            count = msg.split("–ó–∞–≥—Ä—É–∂–µ–Ω–æ ")[1].split(" –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö")[0]
            return f"üìú –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)"
        elif "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API" in msg:
            return "üß† –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç)..."
        elif "–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ app.services.deepresearch_service.research" in msg:
            seconds = msg.split("–∑–∞ ")[1].split(" —Å–µ–∫")[0]
            return f"‚úì –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {seconds} —Å–µ–∫"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥
        return None
    
    async def _send_to_clients(self, log_entry: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º."""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        message = {
            "type": "log",
            "content": log_entry,
            "timestamp": datetime.now().strftime("%H:%M:%S")
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        for client in connected_clients:
            try:
                if client.client_state == WebSocketState.CONNECTED:
                    await client.send_json(message)
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤
def setup_websocket_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è WebSocket."""
    websocket_handler = WebSocketLogHandler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.addHandler(websocket_handler)
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_loggers = [
        logging.getLogger("app"),
        logging.getLogger("app.handlers"),
        logging.getLogger("app.services"),
        logging.getLogger("deepresearch"),
    ]
    
    for logger in app_loggers:
        logger.addHandler(websocket_handler)
    
    return websocket_handler