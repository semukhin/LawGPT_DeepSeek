"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —á–µ—Ä–µ–∑ WebSocket.
"""
import logging
import asyncio
from typing import List, Dict, Any
from app.websocket_state import connected_clients
from datetime import datetime
from starlette.websockets import WebSocketState


class WebSocketLogHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket."""
    
    def __init__(self):
        super().__init__()
        self.setLevel(logging.INFO)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
        self.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
        
    def emit(self, record):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if any(skip_term in record.getMessage() for skip_term in 
                ['HEAD http', 'GET http', 'POST http', 'OPTIONS http']):
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥
        log_entry = self.format(record)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        user_friendly_log = self._simplify_log(log_entry, record)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        if user_friendly_log:
            asyncio.create_task(self._send_to_clients(user_friendly_log))
    
    
    def _simplify_log(self, log_entry: str, record) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        msg = record.getMessage()
        
        # –í–∫–ª—é—á–∞–µ–º –ø—Ä—è–º–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"LOG MESSAGE: {msg}")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(pattern in msg for pattern in ["–ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "DeepResearch", "–∑–∞–ø—Ä–æ—Å", "–î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"]):
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "–î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞:" in msg:
                symbols_count = msg.split("–î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞:")[1].split("—Å–∏–º–≤–æ–ª–æ–≤")[0].strip()
                return f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ({symbols_count} —Å–∏–º–≤–æ–ª–æ–≤)"
            return f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"
            
        if any(pattern in msg for pattern in ["ElasticSearch", "Elasticsearch", "–ø–æ–∏—Å–∫ –≤ –∑–∞–∫–æ–Ω", "es_law_search"]):
            return "üîç –ü–æ–∏—Å–∫ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ..."
            
        if any(pattern in msg for pattern in ["google_search", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "web_search"]):
            return "üåê –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ..."
            
        if "–ù–∞–π–¥–µ–Ω–æ" in msg:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            count = "–Ω–µ—Å–∫–æ–ª—å–∫–æ"
            if "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤" in msg:
                try:
                    count = msg.split("–ù–∞–π–¥–µ–Ω–æ ")[1].split(" —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö")[0]
                except:
                    pass
            return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {count} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            
        if any(pattern in msg for pattern in ["–ó–∞–≥—Ä—É–∂–µ–Ω–æ", "–∏—Å—Ç–æ—Ä–∏", "—Å–æ–æ–±—â–µ–Ω–∏–π", "–¥–∏–∞–ª–æ–≥"]):
            count = "–Ω–µ—Å–∫–æ–ª—å–∫–æ"
            if "–ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π" in msg:
                try:
                    count = msg.split("–ó–∞–≥—Ä—É–∂–µ–Ω–æ ")[1].split(" –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö")[0]
                except:
                    pass
            return f"üìú –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)"
            
        if any(pattern in msg for pattern in ["API", "DeepSeek", "–∑–∞–ø—Ä–æ—Å –∫ API"]):
            return "üß† –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç)..."
            
        if any(pattern in msg for pattern in ["–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "research", "–∑–∞–≤–µ—Ä—à–µ–Ω"]):
            return "‚úì –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if record.levelno >= logging.INFO:
            return f"‚ÑπÔ∏è {msg}"
            
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤
def setup_websocket_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è WebSocket."""
    websocket_handler = WebSocketLogHandler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.addHandler(websocket_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∫ –≤–∞–∂–Ω—ã–º –ª–æ–≥–≥–µ—Ä–∞–º
    critical_loggers = [
        "app",
        "app.handlers",
        "app.services",
        "app.handlers.deepresearch",
        "app.services.deepresearch_service",
        "app.handlers.es_law_search",
        "app.handlers.web_search"
    ]
    
    for logger_name in critical_loggers:
        logger = logging.getLogger(logger_name)
        logger.setLevel(logging.INFO)
        logger.addHandler(websocket_handler)
    
    return websocket_handler