import os
import subprocess
from docx import Document
import logging
import fitz 
import pytesseract
from pdf2image import convert_from_path
import time
from fastapi import UploadFile
import aiofiles
from transliterate import translit
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
UPLOAD_FOLDER = "uploads"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract
pytesseract.pytesseract.tesseract_cmd = "/bin/tesseract"

MAX_EXTRACTED_TEXT_SIZE = 30000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞



def is_valid_docx(file_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º DOCX (ZIP-–∞—Ä—Ö–∏–≤–æ–º).
    """
    try:
        with open(file_path, "rb") as f:
            header = f.read(4)
        return header == b'PK\x03\x04'  # DOCX - —ç—Ç–æ zip-–∞—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å PK (ZIP signature)
    except Exception:
        return False

def convert_doc_to_docx(doc_file_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .doc –≤ .docx —Å –ø–æ–º–æ—â—å—é LibreOffice.
    """
    docx_file_path = doc_file_path.replace(".doc", ".docx")
    try:
        subprocess.run(
            [
                "libreoffice",
                "--headless",
                "--convert-to",
                "docx",
                doc_file_path,
                "--outdir",
                os.path.dirname(doc_file_path),
            ],
            check=True
        )
        if os.path.exists(docx_file_path):
            return docx_file_path
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .doc –≤ .docx: {e}")

    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å .doc –≤ .docx.")


def extract_text_from_docx(docx_file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .docx (–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ .doc) –∏ —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """
    if not os.path.exists(docx_file_path):
        raise ValueError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {docx_file_path}")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª ZIP-–∞—Ä—Ö–∏–≤–æ–º (DOCX)
    if not is_valid_docx(docx_file_path):
        # –ï—Å–ª–∏ –Ω–µ ZIP, –º–æ–∂–µ—Ç –±—ã—Ç—å .doc (binary), —Ç–æ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:
        if docx_file_path.lower().endswith(".doc"):
            docx_file_path = convert_doc_to_docx(docx_file_path)
            if not is_valid_docx(docx_file_path):
                raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {docx_file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º DOCX/DOC!")
        else:
            raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {docx_file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DOCX/DOC –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω!")

    # 2. MIME-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
    #    –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ try/except, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å—Å—è, –µ—Å–ª–∏ MIME = octet-stream
    try:
        import magic
        mime = magic.Magic(mime=True)
        file_type = mime.from_file(docx_file_path)

        # –ï—Å–ª–∏ MIME ‚Äî "application/octet-stream", –Ω–æ —Ñ–∞–π–ª ZIP ‚Üí –ø—Ä–∏–Ω–∏–º–∞–µ–º
        # –ï—Å–ª–∏ MIME ‚Äî "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ‚Üí —Ç–æ–∂–µ –æ–∫
        # –ï—Å–ª–∏ MIME ‚Äî "application/msword" ‚Üí —Ç–æ–∂–µ –æ–∫
        # –ò–Ω–∞—á–µ ‚Üí warning
        valid_mimes = {
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/msword",
            "application/octet-stream"
        }
        if file_type not in [
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/msword",
            "application/octet-stream"
        ]:
            raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {docx_file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DOCX/DOC. –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ {file_type}")

    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ MIME: {str(e)}")

    # 3. –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ DOCX
    try:
        document = Document(docx_file_path)
        full_text = "\n".join([p.text.strip() for p in document.paragraphs if p.text.strip()])
        if full_text.strip():
            return full_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ python-docx: {e}")

    # 4. –ï—Å–ª–∏ python-docx –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å, –ø—Ä–æ–±—É–µ–º Mammoth
    try:
        with open(docx_file_path, "rb") as docx_file:
            import mammoth
            result = mammoth.extract_raw_text(docx_file)
            return result.value.strip()
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Mammoth: {e}")



def extract_text_from_scanned_pdf(file_path):
    """
    OCR –¥–ª—è PDF, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è (—Å–∫–∞–Ω—ã).
    """
    text = ""
    try:
        images = convert_from_path(file_path)
        for image in images:
            text += pytesseract.image_to_string(image, lang="rus")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OCR –¥–ª—è PDF: {e}")
    return text

def extract_text_from_pdf(file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Å–∫–∞–Ω), –ø—Ä–æ–±—É–µ–º OCR.
    """
    text = ""
    try:
        doc = fitz.open(file_path)
        for page in doc:
            text += page.get_text("text")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")

    if not text.strip():  # –ï—Å–ª–∏ PDF –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º OCR
        logging.info("üìÑ PDF –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º OCR...")
        text = extract_text_from_scanned_pdf(file_path)

    return text

def extract_text_from_any_document(file_path: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –µ—Å–ª–∏ PDF ‚Üí PDF-–ª–æ–≥–∏–∫–∞,
    –µ—Å–ª–∏ DOC/DOCX ‚Üí docx-–ª–æ–≥–∏–∫–∞,
    –∏–Ω–∞—á–µ ‚Üí –æ—à–∏–±–∫–∞.
    
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è
    –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞.
    """
    _, ext = os.path.splitext(file_path)
    ext = ext.lower()

    try:
        start_time = time.time()
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        if ext in [".pdf"]:
            extracted_text = extract_text_from_pdf(file_path)
        elif ext in [".doc", ".docx"]:
            extracted_text = extract_text_from_docx(file_path)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {ext}")
        
        elapsed_time = time.time() - start_time
        logging.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if extracted_text and len(extracted_text) > MAX_EXTRACTED_TEXT_SIZE:
            logging.info(f"üìÑ –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤). –û–±—Ä–µ–∑–∞–µ–º –¥–æ {MAX_EXTRACTED_TEXT_SIZE} —Å–∏–º–≤–æ–ª–æ–≤.")
            
            # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—á–∫–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            cutoff_point = MAX_EXTRACTED_TEXT_SIZE
            
            # –ò—â–µ–º –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            for i in range(MAX_EXTRACTED_TEXT_SIZE - 1, MAX_EXTRACTED_TEXT_SIZE - 200, -1):
                if i < len(extracted_text) and extracted_text[i] in ['.', '!', '?', '\n']:
                    cutoff_point = i + 1
                    break
            
            truncated_text = extracted_text[:cutoff_point] + f"\n\n... [—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—Ä–µ–∑–∞–Ω, –ø–æ–∫–∞–∑–∞–Ω–æ {cutoff_point} –∏–∑ {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤]"
            logging.info(f"üìÑ –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—Ä–µ–∑–∞–Ω. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(truncated_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return truncated_text
        
        return extracted_text or "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"


# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
async def process_uploaded_file(file: UploadFile) -> tuple[str, str]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        tuple[str, str]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ (–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç)
    """
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    file_extension = os.path.splitext(file.filename)[1].lower() if file.filename else ""
    if file_extension not in ['.pdf', '.doc', '.docx']:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .pdf, .doc, .docx")
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    original_filename = file.filename.replace(" ", "_")
    filename_no_ext, file_extension = os.path.splitext(original_filename)
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    try:
        transliterated_filename = translit(filename_no_ext, 'ru', reversed=True)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å –±–∞–∑–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–æ–π
        transliterated_filename = ''.join(c if c.isalnum() or c in '_-.' else '_' for c in filename_no_ext)

    new_filename = f"{timestamp}_{transliterated_filename}{file_extension}"
    file_path = os.path.join(UPLOAD_FOLDER, new_filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        async with aiofiles.open(file_path, "wb") as buffer:
            await buffer.write(await file.read())
        logging.info(f"üìÇ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        extracted_text = extract_text_from_any_document(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω
        if not extracted_text:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {file_path}")
            extracted_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω."
        
        elapsed_time = time.time() - start_time
        logging.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        return file_path, extracted_text
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
        file_info = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file.filename}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(file_path)} –±–∞–π—Ç. –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}"
        return file_path, file_info