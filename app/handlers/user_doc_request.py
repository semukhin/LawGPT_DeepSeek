import os
import subprocess
import logging
import time
import re
import asyncio
import json
import aiofiles
import mimetypes
import tempfile
import shutil
from datetime import datetime
from typing import Tuple, List, Dict, Optional, Any, Union

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
import docx
import pandas as pd
from docx.shared import Pt

# FastAPI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from fastapi import UploadFile, HTTPException, status

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ Gemini –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
try:
    from app.services.gemini_service import gemini_service
    logging.info("‚úÖ –°–µ—Ä–≤–∏—Å Gemini —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
except ImportError:
    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å gemini_service. OCR –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
    gemini_service = None
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ gemini_service: {e}")
    gemini_service = None

# –ò–º–ø–æ—Ä—Ç PyMuPDF (fitz) —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
try:
    import fitz
    logging.info("‚úÖ PyMuPDF (fitz) —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
except ImportError:
    logging.warning("‚ö†Ô∏è PyMuPDF (fitz) –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")
    fitz = None
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ PyMuPDF (fitz): {e}")
    fitz = None

# –ò–º–ø–æ—Ä—Ç transliterate —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
try:
    from transliterate import translit, get_available_language_codes
    logging.info("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'transliterate' —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    logging.info(f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏: {get_available_language_codes()}")
except ImportError as e:
    translit = None
    logging.warning(f"‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'transliterate' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞–∫–µ—Ç–∞.")
    logging.warning("‚ö†Ô∏è –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –±—É–¥—É—Ç —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é.")
except Exception as e:
    translit = None
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ 'transliterate': {e}. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä—É—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è.")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
UPLOAD_FOLDER = "uploads"
TEMP_FOLDER = "temp_processing"  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
OUTPUT_FOLDER = "output_documents"  # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
for folder in [UPLOAD_FOLDER, TEMP_FOLDER, OUTPUT_FOLDER]:
    if not os.path.exists(folder):
        try:
            os.makedirs(folder, exist_ok=True)
            logging.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {folder}")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {folder}: {str(e)}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
SUPPORTED_EXTENSIONS = ['.pdf', '.doc', '.docx', '.xlsx', '.jpeg', '.jpg', '.tiff', '.tif']

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä—É—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
MANUAL_TRANSLIT_MAP = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
    '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO',
    '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
    '–§': 'F', '–•': 'H', '–¶': 'TS', '–ß': 'CH', '–®': 'SH', '–©': 'SCH', '–™': '',
    '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA',
    ' ': '_', '-': '-', '.': '.'  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∑–∞–º–µ–Ω—É –ø—Ä–æ–±–µ–ª–æ–≤
}

def safe_filename(filename: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏, —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É—è
    –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –∑–∞–º–µ–Ω—è—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.
    """
    filename_no_ext, file_extension = os.path.splitext(filename)
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—É–¥–µ—Ç .txt –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if not file_extension:
        file_extension = ".txt"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ .txt, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if "_recognized" in filename_no_ext or "—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π" in filename_no_ext.lower():
        file_extension = ".txt"

    if translit:
        try:
            transliterated_name = translit(filename_no_ext, 'ru', reversed=True)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ '{filename_no_ext}' —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω—É—é —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é.")
            transliterated_name = ''.join(MANUAL_TRANSLIT_MAP.get(c, c) for c in filename_no_ext)
    else:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä—É—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∏–º–µ–Ω
        logging.info(f"üî§ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä—É—á–Ω—É—é —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è '{filename_no_ext}'")
        transliterated_name = ''.join(MANUAL_TRANSLIT_MAP.get(c, c) for c in filename_no_ext)
        logging.info(f"üî§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏: '{transliterated_name}'")

    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, _, - –∏ .
    safe_name = ''.join(c if c.isalnum() or c in '_-.' else '_' for c in transliterated_name)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ _ –∏–ª–∏ . (–∫—Ä–æ–º–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    safe_name = re.sub(r'^[_.]+', '', safe_name)
    safe_name = re.sub(r'[_.]+$', '', safe_name)

    # –ó–∞–º–µ–Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –æ–¥–Ω–∏–º
    safe_name = re.sub(r'_{2,}', '_', safe_name)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    safe_name = re.sub(r'^\d{8}_\d{6}_', '', safe_name)

    if not safe_name:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏–º—è —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º
        safe_name = "document"
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    final_name = safe_name + file_extension.lower()
    
    logging.info(f"üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {final_name}")
    return final_name


def is_valid_docx_sync(file_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º DOCX (ZIP-–∞—Ä—Ö–∏–≤–æ–º). –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    """
    try:
        with open(file_path, "rb") as f:
            header = f.read(4)
        return header == b'PK\x03\x04'  # DOCX - —ç—Ç–æ zip-–∞—Ä—Ö–∏–≤
    except Exception:
        return False


async def convert_doc_to_docx_async(doc_file_path: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .doc –≤ .docx —Å –ø–æ–º–æ—â—å—é LibreOffice –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É .docx —Ñ–∞–π–ª—É.
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ docx —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    temp_docx_filename = f"{os.path.basename(doc_file_path)}_{int(time.time())}.docx"
    temp_docx_file_path = os.path.join(TEMP_FOLDER, temp_docx_filename)

    try:
        logging.info(f"üõ†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è .doc –≤ .docx: {doc_file_path} -> {temp_docx_file_path}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º LibreOffice –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        await asyncio.to_thread(
            subprocess.run,
            [
                "libreoffice",
                "--headless",
                "--convert-to",
                "docx",
                doc_file_path,
                "--outdir",
                TEMP_FOLDER,  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            ],
            check=True,  # –í—ã–∑–æ–≤–µ—Ç CalledProcessError –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
            capture_output=True,  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout/stderr –¥–ª—è –ª–æ–≥–æ–≤
            text=True  # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        )

        # LibreOffice —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º, –Ω–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .docx, –≤ outdir
        expected_output_path = os.path.join(TEMP_FOLDER, os.path.splitext(os.path.basename(doc_file_path))[0] + '.docx')

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if os.path.exists(expected_output_path):
            os.rename(expected_output_path, temp_docx_file_path)
            logging.info(f"‚úÖ .doc —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ .docx: {temp_docx_file_path}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            if os.path.getsize(temp_docx_file_path) == 0:
                raise ValueError(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_docx_file_path} –ø—É—Å—Ç.")
            return temp_docx_file_path
        else:
            raise FileNotFoundError(f"LibreOffice –Ω–µ —Å–æ–∑–¥–∞–ª –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {expected_output_path}")

    except FileNotFoundError:
        # –≠—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ subprocess.run, –µ—Å–ª–∏ libreoffice –Ω–µ –Ω–∞–π–¥–µ–Ω
        raise RuntimeError("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LibreOffice —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ subprocess –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .doc: {e.stdout} {e.stderr}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .doc –≤ .docx. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .doc: {str(e)}")
        raise ValueError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .doc –≤ .docx: {str(e)}")


async def extract_text_from_docx_async(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .docx (–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ .doc) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-docx, —Å fallback –Ω–∞ mammoth.
    """
    temp_file_to_cleanup = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è (–∏–∑ .doc)

    try:
        # 1. –ï—Å–ª–∏ —ç—Ç–æ .doc, —Å–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π .docx
        if file_path.lower().endswith(".doc"):
            temp_file_to_cleanup = await convert_doc_to_docx_async(file_path)
            docx_file_path_to_read = temp_file_to_cleanup
        else:
            docx_file_path_to_read = file_path  # –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –∏—Å—Ö–æ–¥–Ω—ã–º .docx

        if not os.path.exists(docx_file_path_to_read):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {docx_file_path_to_read}")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ZIP-–∞—Ä—Ö–∏–≤–æ–º (DOCX)
        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã—Å—Ç—Ä–∞—è, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–ª–∏ –æ–±–µ—Ä–Ω—É—Ç—å –≤ to_thread –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if not await asyncio.to_thread(is_valid_docx_sync, docx_file_path_to_read):
            raise ValueError(f"–§–∞–π–ª {os.path.basename(file_path)} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º DOCX –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω!")

        # 3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è MIME-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –µ—Å–ª–∏ magic —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        try:
            import magic
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è magic –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π, –Ω–æ from_file –±—ã—Å—Ç—Ä–∞—è
            mime = magic.Magic(mime=True)
            file_type = await asyncio.to_thread(mime.from_file, docx_file_path_to_read)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME, –Ω–æ –Ω–µ –¥–µ–ª–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ ZIP-–∑–∞–≥–æ–ª–æ–≤–æ–∫ OK
            valid_mimes_pattern = r"application/vnd\.openxmlformats-officedocument\.wordprocessingml\.document|application/msword|application/octet-stream"
            if not re.match(valid_mimes_pattern, file_type):
                logging.warning(f"‚ö†Ô∏è MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞ {os.path.basename(file_path)} ({file_type}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –¥–ª—è DOCX/DOC, –Ω–æ ZIP-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç.")

        except ImportError:
            logging.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'python-magic' –∏–ª–∏ libmagic –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. MIME-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ MIME-–ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {str(e)}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

        # 4. –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ DOCX –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        try:
            # python-docx –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            document = await asyncio.to_thread(docx.Document, docx_file_path_to_read)
            full_text = "\n".join(
                [p.text.strip() for p in document.paragraphs if p.text.strip()])
            if full_text.strip():
                logging.info(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ DOCX —Å –ø–æ–º–æ—â—å—é python-docx.")
                return full_text
            logging.warning(f"‚ö†Ô∏è python-docx –∏–∑–≤–ª–µ–∫ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–∑ {os.path.basename(file_path)}. –ü–æ–ø—Ä–æ–±—É–µ–º Mammoth.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ python-docx: {e}. –ü–æ–ø—Ä–æ–±—É–µ–º Mammoth.", exc_info=True)

        # 5. –ï—Å–ª–∏ python-docx –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å, –ø—Ä–æ–±—É–µ–º Mammoth –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        try:
            with open(docx_file_path_to_read, "rb") as docx_file:
                import mammoth
                # mammoth.extract_raw_text –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º
                result = await asyncio.to_thread(mammoth.extract_raw_text, docx_file)
                if result.value.strip():
                    logging.info(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ DOCX —Å –ø–æ–º–æ—â—å—é Mammoth.")
                    return result.value.strip()
                else:
                    logging.warning(f"‚ö†Ô∏è Mammoth –∏–∑–≤–ª–µ–∫ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–∑ {os.path.basename(file_path)}.")
                    return ""  # –í–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω
        except ImportError:
            logging.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'mammoth' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX/DOC —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}. –ù–µ –Ω–∞–π–¥–µ–Ω Mammoth.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Mammoth: {e}", exc_info=True)
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX/DOC —Ñ–∞–π–ª–∞ {os.path.basename(file_path)} —Å –ø–æ–º–æ—â—å—é Mammoth: {e}")

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if temp_file_to_cleanup and os.path.exists(temp_file_to_cleanup):
            try:
                await cleanup_file(temp_file_to_cleanup)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_file_to_cleanup}: {e}")


async def extract_text_from_xlsx_async(file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞ (.xlsx) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.
    """
    try:
        logging.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–∞: {file_path}")
        start_time = time.time()

        # pandas.read_excel –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º
        excel_data = await asyncio.to_thread(pd.ExcelFile, file_path)
        sheets = await asyncio.to_thread(lambda x: x.sheet_names, excel_data)  # –í—ã–∑–æ–≤ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –ø–æ—Ç–æ–∫–µ

        extracted_text = f"Excel-–¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(sheets)} –ª–∏—Å—Ç–æ–≤:\n\n"

        for sheet_name in sheets:
            try:
                # pandas.read_excel –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º
                df = await asyncio.to_thread(pd.read_excel, excel_data, sheet_name)
                sheet_text = f"== –õ–∏—Å—Ç: {sheet_name} ==\n"

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
                rows, cols = df.shape
                sheet_text += f"–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {rows} —Å—Ç—Ä–æ–∫ x {cols} —Å—Ç–æ–ª–±—Ü–æ–≤\n\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                headers = df.columns.tolist()
                sheet_text += "–ó–ê–ì–û–õ–û–í–ö–ò: " + " | ".join(str(h)
                                                        for h in headers) + "\n\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫)
                max_rows = min(50, rows)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Å—Ç—Ä–æ–∫
                for i in range(max_rows):
                    row_data = df.iloc[i].tolist()
                    sheet_text += "–°–¢–†–û–ö–ê " + str(i + 1) + ": " + " | ".join(
                        str(cell) if pd.notna(cell) else "" for cell in row_data) + "\n"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN/None

                if rows > max_rows:
                    sheet_text += f"\n... [–∏ –µ—â—ë {rows - max_rows} —Å—Ç—Ä–æ–∫ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω—ã]\n"

                extracted_text += sheet_text + "\n\n"
            except pd.errors.EmptyDataError:
                sheet_text = f"== –õ–∏—Å—Ç: {sheet_name} ==\n–õ–∏—Å—Ç –ø—É—Å—Ç.\n\n"
                extracted_text += sheet_text
                logging.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –≤ Excel —Ñ–∞–π–ª–µ –ø—É—Å—Ç.")
            except Exception as sheet_e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞ '{sheet_name}': {sheet_e}")
                extracted_text += f"== –õ–∏—Å—Ç: {sheet_name} ==\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞: {sheet_e}\n\n"

        elapsed_time = time.time() - start_time
        logging.info(f"‚úÖ Excel –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

        return extracted_text

    except FileNotFoundError:
        logging.error(f"‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        raise
    except pd.errors.ParserError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.") from e
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        raise ValueError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {str(e)}")


async def extract_text_from_pdf_async(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gemini –¥–ª—è OCR (—Å–∫–∞–Ω—ã) –∏ PyMuPDF
    –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ).
    """
    try:
        logging.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É PDF —Ñ–∞–π–ª–∞: {file_path}")

        # –ß–∏—Ç–∞–µ–º PDF —Ñ–∞–π–ª –≤ –±–∞–π—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with aiofiles.open(file_path, mode="rb") as pdf_file:
            pdf_bytes = await pdf_file.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini —Å–µ—Ä–≤–∏—Å–∞
        if gemini_service and hasattr(gemini_service, "extract_text_from_pdf"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å Gemini –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            logging.info("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –≤ Gemini Service –¥–ª—è OCR/–∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...")
            try:
                gemini_result = await gemini_service.extract_text_from_pdf(pdf_bytes)

                if gemini_result.get("success"):
                    logging.info(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é Gemini API. –°–∏–º–≤–æ–ª–æ–≤: {len(gemini_result.get('text', ''))}")
                    return gemini_result.get("text", "")
                else:
                    error_message = gemini_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Gemini Service")
                    logging.warning(f"‚ö†Ô∏è Gemini Service –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: {error_message}. –ü—Ä–æ–±—É–µ–º PyMuPDF...")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API –¥–ª—è PDF: {str(e)}")
                logging.warning("‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ PyMuPDF...")
        else:
            logging.warning("‚ö†Ô∏è Gemini —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º PyMuPDF –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ PyMuPDF (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        if fitz:
            try:
                def get_text_sync(pdf_path):
                    doc = fitz.open(pdf_path)
                    text = ""
                    for page_num in range(len(doc)):
                        page = doc[page_num]
                        text += page.get_text()
                    doc.close()
                    return text

                text = await asyncio.to_thread(get_text_sync, file_path)

                if text.strip():
                    logging.info(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF. –°–∏–º–≤–æ–ª–æ–≤: {len(text)}")
                    return text
                else:
                    logging.warning("‚ö†Ô∏è PyMuPDF –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç).")
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è."
            except Exception as mupdf_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ PyMuPDF: {str(mupdf_error)}", exc_info=True)
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF: {str(mupdf_error)}"
        else:
            logging.error("‚ùå –ù–∏ Gemini, –Ω–∏ PyMuPDF –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF.")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyMuPDF –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∞ Gemini —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    except FileNotFoundError:
        logging.error(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        raise
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}", exc_info=True)
        raise ValueError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}")


async def extract_text_from_image_async(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (JPEG, TIFF) —Å –ø–æ–º–æ—â—å—é Gemini OCR.
    """
    try:
        logging.info(f"üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_path}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
        mime_type, _ = mimetypes.guess_type(file_path)

        if not mime_type:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME —Ç–∏–ø, –ø—Ä–æ–±—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            ext = os.path.splitext(file_path)[1].lower()
            if ext in ['.jpg', '.jpeg']:
                mime_type = 'image/jpeg'
            elif ext in ['.tif', '.tiff']:
                mime_type = 'image/tiff'
            else:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –Ω–µ —è—Å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                mime_type = 'image/jpeg'  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º jpeg –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {os.path.basename(file_path)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º: {mime_type}")

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with aiofiles.open(file_path, mode="rb") as img_file:
            img_bytes = await img_file.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_size_mb = len(img_bytes) / (1024 * 1024)
        logging.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_size_mb:.2f} –ú–ë")

        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª—å—à–µ 4 –ú–ë, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if file_size_mb > 4.0:
            try:
                from PIL import Image
                import io

                logging.info(f"üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                img = Image.open(io.BytesIO(img_bytes))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                width, height = img.size
                max_dimension = 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª—é–±–æ–π —Å—Ç–æ—Ä–æ–Ω—ã

                if width > max_dimension or height > max_dimension:
                    if width > height:
                        new_width = max_dimension
                        new_height = int(height * (max_dimension / width))
                    else:
                        new_height = max_dimension
                        new_width = int(width * (max_dimension / height))

                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                    img = img.resize((new_width, new_height), Image.LANCZOS)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
                    buffer = io.BytesIO()
                    img.save(buffer, format="JPEG", quality=85)
                    img_bytes = buffer.getvalue()

                    # –û–±–Ω–æ–≤–ª—è–µ–º MIME-—Ç–∏–ø
                    mime_type = "image/jpeg"

                    logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {new_width}x{new_height}, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(img_bytes) / (1024 * 1024):.2f} –ú–ë")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini —Å–µ—Ä–≤–∏—Å–∞
        if gemini_service and hasattr(gemini_service, "extract_text_from_image"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini API –¥–ª—è OCR —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            logging.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({mime_type}) –≤ Gemini Service –¥–ª—è OCR...")
            max_retries = 3
            retry_count = 0

            while retry_count < max_retries:
                try:
                    timeout = 60.0 + (retry_count * 30.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ OCR {retry_count + 1} –∏–∑ {max_retries} —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout} —Å–µ–∫...")

                    gemini_result = await gemini_service.extract_text_from_image(img_bytes, mime_type, custom_timeout=timeout)

                    if gemini_result.get("success"):
                        logging.info(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini API. –°–∏–º–≤–æ–ª–æ–≤: {len(gemini_result.get('text', ''))}")
                        return gemini_result.get("text", "")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–º
                    error_message = gemini_result.get("error", "")
                    if "—Ç–∞–π–º–∞—É—Ç" in error_message.lower() or "timeout" in error_message.lower():
                        logging.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {retry_count + 1}: {error_message}")
                        retry_count += 1
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                        await asyncio.sleep(1)
                        continue
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–π–º–∞—É—Ç, –∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}")
                        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API –¥–ª—è OCR: {str(e)}")
                    retry_count += 1
                    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            error_message = gemini_result.get("error", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å OCR –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_message}")
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_message}"
        else:
            logging.error("‚ùå –°–µ—Ä–≤–∏—Å Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å–µ—Ä–≤–∏—Å Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return f"–û—à–∏–±–∫–∞ OCR —Å –ø–æ–º–æ—â—å—é Gemini: {str(e)}"
    except FileNotFoundError:
        logging.error(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
        raise ValueError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")


async def cleanup_file(file_path: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª."""
    if file_path and os.path.exists(file_path):
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –û–° –∏–ª–∏ –§–°
            await asyncio.to_thread(os.remove, file_path)
            logging.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")


async def extract_text_from_any_document(file_path: str) -> Tuple[str, Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
    –û—à–∏–±–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∑–¥–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞.
    """
    _, ext = os.path.splitext(file_path)
    ext = ext.lower()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
    local_file_metadata = {
        "original_filename": os.path.basename(file_path),
        "file_size_bytes": 0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ process_uploaded_file
        "file_size_formatted": "",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ process_uploaded_file
        "extension": ext,
        "processing_time_seconds": 0,
        "extraction_success": False,
        "char_count": 0,
        "word_count": 0,
        "page_count": 0,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è PDF/DOCX –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
        "recognized_text_file_docx": None,  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É docx
        "recognized_text_file_txt": None,  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É txt
        "download_url_docx": None,
        "download_url_txt": None,
        "timestamp": datetime.now().isoformat()
    }

    extracted_text = ""
    extraction_successful = False
    error_message = ""
    start_time = time.time()

    try:
        if not os.path.exists(file_path):
            error_message = f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {file_path}"
            logging.error(f"‚ùå {error_message}")
            # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
            return error_message, local_file_metadata

        file_size = os.path.getsize(file_path)
        if file_size == 0:
            error_message = f"–û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç (0 –±–∞–π—Ç): {file_path}"
            logging.error(f"‚ùå {error_message}")
            return error_message, local_file_metadata

        local_file_metadata["file_size_bytes"] = file_size
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size < 1024:
            local_file_metadata["file_size_formatted"] = f"{file_size} –±–∞–π—Ç"
        elif file_size < 1024 * 1024:
            local_file_metadata["file_size_formatted"] = f"{file_size/1024:.1f} –ö–ë"
        else:
            local_file_metadata["file_size_formatted"] = f"{file_size/(1024*1024):.1f} –ú–ë"

        logging.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ {ext} —Ñ–∞–π–ª–∞: {file_path}")

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        if ext == ".pdf":
            extracted_text = await extract_text_from_pdf_async(file_path)
        elif ext in [".doc", ".docx"]:
            # extract_text_from_docx_async —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –∏ –æ—á–∏—Å—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .doc -> .docx
            extracted_text = await extract_text_from_docx_async(file_path)
        elif ext == ".xlsx":
            extracted_text = await extract_text_from_xlsx_async(file_path)
        elif ext in [".jpg", ".jpeg", ".tif", ".tiff"]:
            extracted_text = await extract_text_from_image_async(file_path)
        else:
            error_message = (
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {ext}. "
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(SUPPORTED_EXTENSIONS)}"
            )
            logging.error(f"‚ùå {error_message}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–µ –±—Ä–æ—Å–∞–µ–º HTTPException –∑–¥–µ—Å—å
            return error_message, local_file_metadata

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏ –æ—Ç –ø–æ–¥-—Ñ—É–Ω–∫—Ü–∏–π
        if extracted_text and extracted_text.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑"):
            error_message = extracted_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            extracted_text = ""  # –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—à–∏–±–∫–∞
            extraction_successful = False
        elif extracted_text and extracted_text.strip():
            extraction_successful = True
            logging.info("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ.")
        else:
            extraction_successful = False
            error_message = "–ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç."
            logging.warning(f"‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")

    except FileNotFoundError as e:
        error_message = f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {e}"
        logging.error(f"‚ùå {error_message}", exc_info=True)
    except ValueError as e:  # –û—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –∏ —Ç.–¥.
        error_message = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}"
        logging.error(f"‚ùå {error_message}", exc_info=True)
    except Exception as e:
        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        error_message = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}"
        logging.error(f"‚ùå {error_message}", exc_info=True)

    elapsed_time = time.time() - start_time
    logging.info(f"‚è±Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    local_file_metadata["processing_time_seconds"] = elapsed_time
    local_file_metadata["extraction_success"] = extraction_successful
    local_file_metadata["char_count"] = len(extracted_text) if extracted_text else 0
    local_file_metadata["word_count"] = len(extracted_text.split()) if extracted_text else 0

    # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å) –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª
    content_to_save = extracted_text if extracted_text else error_message

    if content_to_save:
            logging.info(f"üìÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({len(content_to_save)} —Å–∏–º–≤–æ–ª–æ–≤) –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
            original_filename = os.path.basename(file_path)
            safe_base_name = safe_filename(original_filename)  # safe_filename —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_base_filename = f"{timestamp}_{os.path.splitext(safe_base_name)[0]}"

            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
            safe_original_name = os.path.splitext(safe_base_name)[0]
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            clean_filename = safe_original_name.replace(timestamp + "_", "")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º –∏–º—è
            txt_filename = f"{clean_filename}_recognized.txt"
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è OUTPUT_FOLDER —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(OUTPUT_FOLDER):
                try:
                    os.makedirs(OUTPUT_FOLDER, exist_ok=True)
                    logging.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {OUTPUT_FOLDER}")
                except Exception as e:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {OUTPUT_FOLDER}: {str(e)}")
            
            txt_file_path = os.path.join(OUTPUT_FOLDER, txt_filename)
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                header = f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: {safe_original_name}\n"
                header += f"–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                header += "=" * 50 + "\n\n"
                
                # –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                full_content = header + content_to_save
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–º —Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π —Ç–µ–∫—Å—Ç: –î–ª–∏–Ω–∞={len(content_to_save)} —Å–∏–º–≤–æ–ª–æ–≤, –ó–∞–≥–æ–ª–æ–≤–æ–∫={len(header)} —Å–∏–º–≤–æ–ª–æ–≤")
                logging.info(f"–û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(full_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    logging.info(f"üìä –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(full_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –±–∏–Ω–∞—Ä–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    content_bytes = full_content.encode('utf-8')
                    
                    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.txt') as temp_file:
                        temp_path = temp_file.name
                        temp_file.write(content_bytes)
                        temp_file.flush()
                        os.fsync(temp_file.fileno())
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    shutil.copy2(temp_path, txt_file_path)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
                    file_size = os.path.getsize(txt_file_path)
                    expected_size = len(content_bytes)
                    
                    if file_size == expected_size:
                        logging.info(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_size}/{expected_size} –±–∞–π—Ç")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        local_file_metadata["recognized_text_file_txt"] = txt_file_path
                        local_file_metadata["download_url"] = f"/api/download/{os.path.basename(txt_file_path)}"
                        logging.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ TXT: {txt_file_path} (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
                    else:
                        logging.error(f"‚ùå –ù–µ–ø–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_size} –±–∞–π—Ç, –∑–∞–ø–∏—Å–∞–Ω–æ {file_size} –±–∞–π—Ç")
                        
                        # –ï—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å—å—é
                        with open(txt_file_path, "wb") as f:
                            f.write(content_bytes)
                            f.flush()
                            os.fsync(f.fileno())
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–Ω–æ–≤–∞
                        new_size = os.path.getsize(txt_file_path)
                        if new_size == expected_size:
                            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {new_size}/{expected_size} –±–∞–π—Ç")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                            local_file_metadata["recognized_text_file_txt"] = txt_file_path
                            local_file_metadata["download_url"] = f"/api/download/{os.path.basename(txt_file_path)}"
                            logging.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ TXT: {txt_file_path} (—Ä–∞–∑–º–µ—Ä: {new_size} –±–∞–π—Ç)")
                        else:
                            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {new_size}/{expected_size} –±–∞–π—Ç")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.unlink(temp_path)
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path}: {e}")
                
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª: {e}")
                    raise
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {str(e)}"
                return error_message, local_file_metadata

    # –ï—Å–ª–∏ –±—ã–ª —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    if error_message:
        if extracted_text:
            extracted_text = f"{error_message}\n\n–ß–∞—Å—Ç–∏—á–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{extracted_text}"
        else:
            extracted_text = error_message

    return extracted_text, local_file_metadata


async def process_uploaded_file(file: UploadFile) -> Tuple[str, str, Dict[str, Any]]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    –¥–ª—è API –æ—Ç–≤–µ—Ç–∞, –≤–∫–ª—é—á–∞—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
    """
    start_time = time.time()
    original_file_path = None  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
    file_metadata = {
        "original_filename": file.filename if file and file.filename else "unknown",
        "file_size_bytes": 0,
        "file_size_formatted": "",
        "extension": os.path.splitext(file.filename)[1].lower() if file and file.filename else "unknown",
        "processing_time_seconds": 0,
        "extraction_success": False,
        "char_count": 0,
        "word_count": 0,
        "page_count": 0,
        "recognized_text_file_docx": None,
        "recognized_text_file_txt": None,
        "download_url_docx": None,
        "download_url_txt": None,
        "timestamp": datetime.now().isoformat()
    }

    extracted_text_for_response = ""  # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω API
    response_message = ""  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É—Å–ø–µ—Ö–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if not file or not file.filename:
        error_msg = "–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ"
        logging.error(f"‚ùå {error_msg}")
        # –ë—Ä–æ—Å–∞–µ–º HTTPException, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=error_msg)

    logging.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_extension = os.path.splitext(file.filename)[1].lower()
        file_metadata["extension"] = file_extension

        if file_extension not in SUPPORTED_EXTENSIONS:
            error_msg = (
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}. "
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: {', '.join(SUPPORTED_EXTENSIONS)}"
            )
            logging.error(f"‚ùå {error_msg}")
            raise HTTPException(
                status_code=status.HTTP_415_UNSUPPORTED_MEDIA_TYPE,
                detail=error_msg
            )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_original_filename = safe_filename(file.filename)
        saved_filename = f"{timestamp}_{safe_original_filename}"
        original_file_path = os.path.join(UPLOAD_FOLDER, saved_filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        file_content = await file.read()  # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–∞–º—è—Ç—å
        file_size = len(file_content)

        file_metadata["file_size_bytes"] = file_size
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size < 1024:
            file_metadata["file_size_formatted"] = f"{file_size} –±–∞–π—Ç"
        elif file_size < 1024 * 1024:
            file_metadata["file_size_formatted"] = f"{file_size/1024:.1f} –ö–ë"
        else:
            file_metadata["file_size_formatted"] = f"{file_size/(1024*1024):.1f} –ú–ë"

        logging.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_metadata['file_size_formatted']}")

        if file_size == 0:
            error_msg = "–û—à–∏–±–∫–∞: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç (0 –±–∞–π—Ç)."
            logging.error(f"‚ùå {error_msg}")
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=error_msg)

        if file_size > MAX_FILE_SIZE:
            error_msg = (
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_metadata['file_size_formatted']}. "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE/(1024*1024)} –ú–ë"
            )
            logging.error(f"‚ùå {error_msg}")
            raise HTTPException(status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE, detail=error_msg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if not os.path.exists(UPLOAD_FOLDER):
            os.makedirs(UPLOAD_FOLDER, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with aiofiles.open(original_file_path, "wb") as buffer:
            await buffer.write(file_content)

        logging.info(
            f"üìÇ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {original_file_path} "
            f"(—Ä–∞–∑–º–µ—Ä: {file_metadata['file_size_formatted']})"
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        extracted_text, extraction_metadata = await extract_text_from_any_document(original_file_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        file_metadata.update(extraction_metadata)

        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API - –ª–∏–±–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        extracted_text_for_response = extracted_text

        if file_metadata["extraction_success"]:
            response_message = "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω."
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –°–∏–º–≤–æ–ª–æ–≤: {len(extracted_text_for_response)}")
        else:
            response_message = extracted_text  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ extracted_text
            logging.warning(f"‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π/–ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {response_message}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        if file_metadata["extraction_success"] and extracted_text_for_response:
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            def format_text_sync(text):
                formatted = re.sub(r'\n{3,}', '\n\n', text)  # –°–∂–∏–º–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
                formatted = re.sub(r'[ \t]{2,}', ' ', formatted)  # –°–∂–∏–º–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±—ã
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
                formatted = '\n'.join([line.strip() for line in formatted.split('\n')])
                return formatted.strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞

            formatted_text = await asyncio.to_thread(format_text_sync, extracted_text_for_response)
            extracted_text_for_response = formatted_text
            file_metadata["char_count"] = len(extracted_text_for_response)
            file_metadata["word_count"] = len(extracted_text_for_response.split())

    except HTTPException:
        # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –±—Ä–æ—à–µ–Ω–∞ HTTPException (–Ω–∞–ø—Ä., unsupported type, too large)
        raise
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ
        elapsed_time = time.time() - start_time
        file_metadata["processing_time_seconds"] = round(elapsed_time, 2)
        error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_metadata['original_filename']}: {e}"
        logging.error(f"‚ùå {error_msg}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
        extracted_text_for_response = error_msg
        response_message = error_msg  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_metadata["extraction_success"] = False  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É—Å–ø–µ—Ö = False

    finally:
        # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if original_file_path:
            await cleanup_file(original_file_path)
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ TEMP_FOLDER –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (.doc)
        # –∏–ª–∏ –∫–∞–∫ –æ–±—â–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –µ—Å–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è "–∑–∞–≤–∏—Å—à–∏–µ" —Ñ–∞–π–ª—ã.

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    total_elapsed_time = time.time() - start_time
    file_metadata["processing_time_seconds"] = round(total_elapsed_time, 2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    if file_metadata["extraction_success"] and extracted_text_for_response:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ç–æ –æ–∂–∏–¥–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        file_size_mb = file_metadata["file_size_bytes"] / (1024 * 1024)
        text_length = len(extracted_text_for_response)
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –¥–ª—è PDF ~1000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, ~10 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ 1MB
        expected_min_length = file_size_mb * 10000
        
        if text_length < expected_min_length and file_size_mb > 0.5:
            logging.warning(f"‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º: {text_length} —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞ {file_size_mb:.2f} MB")
            logging.warning(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {int(expected_min_length)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –¥–∏—Å–∫–µ
            if file_metadata["recognized_text_file_txt"]:
                txt_path = os.path.join(OUTPUT_FOLDER, file_metadata["recognized_text_file_txt"])
                if os.path.exists(txt_path):
                    try:
                        with open(txt_path, 'r', encoding='utf-8') as f:
                            file_text = f.read()
                        
                        file_text_length = len(file_text)
                        logging.info(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–µ: {file_text_length} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞, —á–µ–º –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                        if file_text_length > text_length * 1.1:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–∞ 10%
                            logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: +{file_text_length - text_length} —Å–∏–º–≤–æ–ª–æ–≤")
                            extracted_text_for_response = file_text
                            file_metadata["char_count"] = file_text_length
                            file_metadata["word_count"] = len(file_text.split())
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: {e}")
        else:
            logging.info(f"‚úÖ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: {text_length} —Å–∏–º–≤–æ–ª–æ–≤")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É (–º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è),
    # —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    return original_file_path, extracted_text_for_response, file_metadata