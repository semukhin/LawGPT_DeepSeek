"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–∏–∞–ª–æ–≥–∞ –æ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
"""
from typing import Dict, Optional, List, Any, Union
from sqlalchemy.orm import Session 
import logging
import json
import asyncio
from app.handlers.parallel_search import run_parallel_search
from app.utils import measure_time
from app.handlers.es_law_search import search_law_chunks
from app.handlers.web_search import google_search, search_and_scrape, run_multiple_searches
from app.services.deepresearch_service import DeepResearchService
from app.services.deepseek_service import DeepSeekService
from app.models import Message, Thread
from app.config import DEEPSEEK_API_KEY, DEEPSEEK_MODEL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
deep_research_service = DeepResearchService()
deepseek_service = DeepSeekService(
    api_key=DEEPSEEK_API_KEY, 
    model=DEEPSEEK_MODEL,
    temperature=0.8
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def log_function_call(function_name: str, arguments: Dict) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    logging.info(f"üîç –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê: {function_name}")
    logging.info(f"üîç –ê–†–ì–£–ú–ï–ù–¢–´: {json.dumps(arguments, ensure_ascii=False)}")


def is_general_query(query: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–º (–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º).
    
    Args:
        query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        True, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å, False –µ—Å–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    query_lower = query.lower().strip()
    
    # –°–ø–∏—Å–æ–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ (–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    legal_terms = [
        "–∑–∞–∫–æ–Ω", "–∫–æ–¥–µ–∫—Å", "—Å—Ç–∞—Ç—å—è", "–¥–æ–≥–æ–≤–æ—Ä", "–∏—Å–∫", "—Å—É–¥", "–ø—Ä–∞–≤–æ", "—é—Ä–∏—Å—Ç", 
        "–Ω–æ—Ä–º–∞", "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω", "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç", "—à—Ç—Ä–∞—Ñ", 
        "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "–ø—Ä–µ—Ç–µ–Ω–∑–∏", "–≤–∏–Ω–∞", "—É—Å—Ç–∞–≤", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "–≥–∫", "–≥–ø–∫", "–∫–∞—Å", 
        "–Ω–∞–ª–æ–≥", "—é—Ä–ª–∏—Ü–æ", "—Ñ–∏–∑–ª–∏—Ü", "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏", "—Ñ–≥—É–ø", "–ø—Ä–∞–≤–µ",
        "–∞—Ä–µ–Ω–¥–∞", "–∑–∞–ª–æ–≥", "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "—Å–¥–µ–ª–∫–∞", "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ", "–ø—Ä–∞–≤–æ–º–æ—á–∏—è",
        "–∞–∫—Ü–∏–æ–Ω–µ—Ä", "–¥–∏–≤–∏–¥–µ–Ω–¥—ã", "–ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–∏–º—É—â–µ—Å—Ç–≤–æ",
        "–æ—Ñ–µ—Ä—Ç–∞", "–∞–∫—Ü–µ–ø—Ç", "–Ω–æ—Ç–∞—Ä–∏—É—Å", "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", "–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è", "—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–≤—ã–ø–∏—Å–∫–∞", "–µ–≥—Ä—é–ª", "–æ–æ–æ",
        "–∫–∞–ø–∏—Ç–∞–ª", "—É—á—Ä–µ–¥–∏—Ç–µ–ª—å", "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–∏–ø", "–∞–æ", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü", "–ª–∏—Ü–µ–Ω–∑",
        "—Å–∞–Ω–∫—Ü", "–∞—Ä–±–∏—Ç—Ä–∞–∂", "–∏—Å—Ç–µ—Ü", "–æ—Ç–≤–µ—Ç—á–∏–∫", "–∞–ø–µ–ª–ª—è—Ü", "–∫–∞—Å—Å–∞—Ü", "–∏–º—É—â–µ—Å—Ç–≤", "—Å–≤–æ"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–í–°–ï–ì–î–ê –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
    for term in legal_terms:
        if term in query_lower:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω, —Ç–æ —ç—Ç–æ –Ω–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
            return False
    
    # –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    general_patterns = [
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–∑–¥–æ—Ä–æ–≤–æ", "—Ö–∞–π",
        "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "—Å–∞–ª—é—Ç", "–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "—Ö–µ–ª–ª–æ—É", "–∫—É", "—Ö–æ–ª–∞", "–π–æ—É", "–≤–µ—á–µ—Ä –¥–æ–±—Ä—ã–π",
        
        # –û —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
        "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "–∫—Ç–æ —Ç—ã", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å", "—á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è",
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "–∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—à—å—Å—è", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª",
        "—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ç–≤–æ—è –≤–µ—Ä—Å–∏—è", "—Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏", "—Ç—ã —Ä–æ–±–æ—Ç", "—Ç—ã –±–æ—Ç", 
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", 
        "–∫–æ–≥–¥–∞ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª–∏", "–≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è", "—Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        
        # –í–æ–ø—Ä–æ—Å—ã –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏
        "–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–∫–∞–∫ –∂–∏–∑–Ω—å", "–∫–∞–∫ —Ç—ã", "–≤—Å–µ —Ö–æ—Ä–æ—à–æ", 
        "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å", "–∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å", "–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞",
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        "—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø—Å", "–ø–∞—Å–∏–±", "—Å–µ–Ω–∫—Å", "–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω", "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞", 
        "–º–µ—Ä—Å–∏", "–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω", "–±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–æ—Ç –¥—É—à–∏", "—Ü–µ–Ω—é", "—Ä–µ—Å–ø–µ–∫—Ç",
        
        # –§—Ä–∞–∑—ã –ø—Ä–æ—â–∞–Ω–∏—è
        "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "—É–≤–∏–¥–∏–º—Å—è", "–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–±—ã–≤–∞–π",
        "—É–¥–∞—á–∏", "–ø—Ä–æ—â–∞–π", "–¥–æ —Å–∫–æ—Ä–æ–≥–æ", "–ø–æ–∫–µ–¥–∞", "–±—É–¥—å –∑–¥–æ—Ä–æ–≤", "–ø–æ–∫–µ–¥–æ–≤–∞", "—á–∞–æ",
        
        # –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –æ—Ü–µ–Ω–∫–∏
        "–º–æ–ª–æ–¥–µ—Ü", "–æ—Ç–ª–∏—á–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "–Ω–µ–ø–ª–æ—Ö–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", 
        "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ", "–±–ª–µ—Å—Ç—è—â–µ", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ", "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ", "—É–º–Ω–∏—Ü–∞", 
        "—à–∏–∫–∞—Ä–Ω–æ", "–±—Ä–∞–≤–æ", "–≤–ø–µ—á–∞—Ç–ª—è–µ—Ç", "–æ–≥–æ–Ω—å", "–±–æ–º–±–∞",
        
        # –ò–∑–≤–∏–Ω–µ–Ω–∏—è –∏ —Å–æ–∂–∞–ª–µ–Ω–∏—è
        "–∏–∑–≤–∏–Ω–∏", "–ø—Ä–æ—Å—Ç–∏", "—Å–æ—Ä—Ä–∏", "–≤–∏–Ω–æ–≤–∞—Ç", "–ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è", "–º–Ω–µ –∂–∞–ª—å", "—Å–æ–∂–∞–ª–µ—é", 
        "–Ω–µ —Ö–æ—Ç–µ–ª", "–º–æ—è –æ—à–∏–±–∫–∞", "–º–æ–π –∫–æ—Å—è–∫", "–Ω–µ –æ–±–∏–∂–∞–π—Å—è", "–∏–∑–≤–∏–Ω—è—é—Å—å",
        
        # –°–æ–≥–ª–∞—Å–∏–µ/–Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ
        "—Å–æ–≥–ª–∞—Å–µ–Ω", "–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "—Ç–∞–∫ —Ç–æ—á–Ω–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–Ω–µ–≤–µ—Ä–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", 
        "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–≤–µ—Ä–Ω–æ", "—Å–æ–≥–ª–∞—à—É—Å—å", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é", "–∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç",
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –º–æ–¥–µ–ª–∏
        "–∫–∞–∫—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–∫–∞–∫–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π", "–∫–∞–∫–æ–π llm", "–∫–∞–∫–∞—è –º–æ–¥–µ–ª—å", "–Ω–∞ —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å",
        "–Ω–∞ –∫–∞–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–Ω–∞ –∫–∞–∫–æ–π –æ—Å–Ω–æ–≤–µ", "–Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ", "deepseek", "claude", "gpt",
        "—Ç–æ–∫–µ–Ω—ã", "–∫–æ–Ω—Ç–µ–∫—Å—Ç", "–æ–±—É—á–µ–Ω–∏–µ", "—è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–∏–∏", "–∞–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π", "ai",
        "—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "—Ç–≤–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "transformer", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä",
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        "–æ–∫", "—è—Å–Ω–æ", "–ø–æ–Ω—è–ª", "–ø–æ–Ω—è—Ç–Ω–æ", "–¥–∞", "–Ω–µ—Ç", "–∫–æ–Ω–µ—á–Ω–æ", "—Ä–∞–∑—É–º–µ–µ—Ç—Å—è", "–≤–æ–∑–º–æ–∂–Ω–æ",
        "–∏–º–µ–Ω–Ω–æ", "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "–≤–µ—Ä–æ—è—Ç–Ω–æ", "–æ—á–µ–≤–∏–¥–Ω–æ", "–ª–æ–≥–∏—á–Ω–æ", "–±–µ–∑—É—Å–ª–æ–≤–Ω–æ",
        
        # –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏
        "–ø–æ–º–æ–≥–∏", "–ø–æ–¥—Å–∫–∞–∂–∏", "–ø–æ–º–æ—â—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "–æ–±—ä—è—Å–Ω–∏", "—Ä–∞–∑—ä—è—Å–Ω–∏", "—É—Ç–æ—á–Ω–∏", "–∫–∞–∫ –º–Ω–µ", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫ –±—ã—Ç—å",
        
        # –£–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏
        "–æ—à–∏–±–∫–∞", "—Ç—ã –æ—à–∏–±–∞–µ—à—å—Å—è", "—ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–æ—à–∏–±—Å—è", "–Ω–µ —Ç–∞–∫", "–Ω–µ—Ç–æ—á–Ω–æ",
        "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–Ω–µ–ø—Ä–∞–≤–¥–∞", "–ø—É—Ç–∞–µ—à—å", "–∑–∞–±–ª—É–∂–¥–∞–µ—à—å—Å—è", 
        
        # –ü—Ä–æ—Å—å–±—ã –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
        "–ø—Ä–æ–¥–æ–ª–∂–∞–π", "–¥–∞–ª—å—à–µ", "—á—Ç–æ –µ—â–µ", "–∏ —á—Ç–æ", "–µ—â–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ",
        "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ", "–¥–∞–ª—å–Ω–µ–π—à–µ–µ", "—Å–ª–µ–¥—É—é—â–µ–µ", "—á—Ç–æ –ø–æ—Ç–æ–º", "–∞ –∑–∞—Ç–µ–º"
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for pattern in general_patterns:
        if pattern in query_lower:
            return True

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 4 —Å–ª–æ–≤), —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
    if len(query_lower.split()) < 4 and len(query_lower) < 25:
        return True
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å, —á—Ç–æ –æ–Ω –æ–±—â–∏–π
    return False


@measure_time
async def handle_function_call(function_name: str, arguments: Dict, thread_id: Optional[str] = None, db: Optional[Session] = None) -> Dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    query = arguments.get("query", "")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log_function_call(function_name, arguments)

    if function_name == "search_law_chunks":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ Elasticsearch –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            es_results = search_law_chunks(query)
            if es_results:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(es_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ Elasticsearch")
                for i, chunk in enumerate(es_results[:2]):  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 2 —á–∞–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    logging.info(f"üìÑ –ß–∞–Ω–∫ {i+1}: {chunk[:100]}...")
                
                # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞–Ω–∫–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
                combined_text = "\n\n".join(es_results)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepResearch –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
                deep_results = await deep_research_service.research(
                    query=combined_text, 
                    thread_id=thread_id,  # –ü–µ—Ä–µ–¥–∞–µ–º thread_id
                    message_id=None, 
                    user_id=None, 
                    db=db  # –ü–µ—Ä–µ–¥–∞–µ–º db
                )
                
                return {
                    "found": True,
                    "chunks_count": len(es_results),
                    "deep_research_results": deep_results.to_dict()
                }
            
            logging.info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {"found": False, "error": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ: {str(e)}")
            return {"found": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ: {str(e)}"}


    elif function_name == "search_web":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            logs = []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ
            search_results = await run_multiple_searches(query, logs)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
            all_results = []
            for search_type, results in search_results.items():
                all_results.extend(results)
            
            if all_results:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                extracted_texts = []
                for result in all_results:
                    if result.is_successful():
                        extracted_texts.append({
                            "url": result.url,
                            "title": result.title,
                            "text": result.text[:3000]  # –ë–µ—Ä–µ–º –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                        })
                
                combined_text = "\n\n".join([
                    f"–ò—Å—Ç–æ—á–Ω–∏–∫: {item['url']}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {item['title']}\n{item['text']}"
                    for item in extracted_texts
                ])
                
                user_id = None
                message_id = None
                if thread_id and db:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_message = db.query(Message).filter(
                            Message.thread_id == thread_id,
                            Message.role == "user"
                        ).order_by(Message.created_at.desc()).limit(10).first()
                        
                        if user_message:
                            message_id = user_message.id
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Ç—Ä–µ–¥–∞
                        thread = db.query(Thread).filter(Thread.id == thread_id).first()
                        if thread:
                            user_id = thread.user_id
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepResearch –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                deep_results = await deep_research_service.research(combined_text)
                
                return {
                    "found": True, 
                    "sources_count": len(extracted_texts),
                    "sources": [{"url": item["url"], "title": item["title"]} for item in extracted_texts[:5]],
                    "deep_research_results": deep_results.to_dict()
                }
            
            logging.info("‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {"found": False, "error": "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ: {str(e)}")
            return {"found": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ: {str(e)}"}
    
    
    elif function_name == "deep_research":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            logs = []
            additional_context = []
            
            # 1. –ü–æ–∏—Å–∫ –≤ Elasticsearch
            try:
                es_results = search_law_chunks(query)
                if es_results:
                    additional_context.append({
                        "type": "legislation",
                        "found": True,
                        "data": es_results[:5]  # –ë–µ—Ä–µ–º –¥–æ 5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    })
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Elasticsearch: {str(e)}")
            
            # 2. –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            try:
                web_results = await run_multiple_searches(query, logs)
                all_web_results = []
                for search_type, results in web_results.items():
                    all_web_results.extend(results)
                
                if all_web_results:
                    extracted_texts = []
                    for result in all_web_results:
                        if result.is_successful():
                            extracted_texts.append({
                                "url": result.url,
                                "title": result.title,
                                "text": result.text[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            })
                    
                    if extracted_texts:
                        additional_context.append({
                            "type": "web",
                            "found": True,
                            "data": extracted_texts[:5]  # –ë–µ—Ä–µ–º –¥–æ 5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        })
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {str(e)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            deep_results = await deep_research_service.research(query, additional_context)
            
            return {
                "found": True,
                "deep_research_results": deep_results.to_dict()
            }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return {"found": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}"}
            
    return {"found": False, "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"}


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è DeepSeek API
AVAILABLE_FUNCTIONS = [
    {
        "name": "search_law_chunks",
        "description": "–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∑–∞–∫–æ–Ω–∞—Ö, –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º–∞—Ö, –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –∫–æ–¥–µ–∫—Å–µ, –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∞—Ö.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã."
                }
            },
            "required": ["query"]
        }
    },
    {
        "name": "search_web",
        "description": "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å—Ç–∞—Ç–µ–π, –∏ –æ–±–∑–æ—Ä–æ–≤.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ."
                }
            },
            "required": ["query"]
        }
    },
    {
        "name": "deep_research",
        "description": "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                }
            },
            "required": ["query"]
        }
    }
]


@measure_time
async def send_custom_request(user_query: str, thread_id: Optional[str] = None, db: Optional[Session] = None) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ function calling.
    
    Args:
        user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        thread_id: ID —Ç—Ä–µ–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    logging.info(f"üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query[:100]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º (–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º)
    is_general = is_general_query(query=user_query)  # –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ –∏–º–µ–Ω–∏
    
    if is_general:
        logging.info("üé≠ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –æ–±—â–∏–π (–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π) –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫")
        
        # –î–ª—è –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        conversation_system_prompt = """
        –¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
        –°–µ–π—á–∞—Å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
        –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É.
        
        –ù–µ –ø—ã—Ç–∞–π—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã.
        –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ "–ø—Ä–∏–≤–µ—Ç" –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –∞ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ü—Ä–∏–≤–µ—Ç".
        
        –ù–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–±–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å, —á—Ç–æ —Ç—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT, 
        —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
        """
        
        # –í—ã–∑—ã–≤–∞–µ–º DeepSeek API –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        response = await deepseek_service.generate_with_system(
            conversation_system_prompt, 
            user_query
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω thread_id
        if thread_id and db:
            try:
                db.add(Message(thread_id=thread_id, role="user", content=user_query))
                db.add(Message(thread_id=thread_id, role="assistant", content=response))
                db.commit()
                logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {e}")
        
        return response
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    system_prompt = """
                –¢—ã - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç), —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é, –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º,
                –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ 
                –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
                
                1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –∑–∞–ø—Ä–æ—Å—ã, –≤—ã–¥–µ–ª—è—è:
                - –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å —Ç–æ—á–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞,
                - –°—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—É–¥–æ–≤,
                - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.

                2. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–æ–Ω—ã –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –¥–æ–≥–æ–≤–æ—Ä–æ–≤, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º–∞—Ö. 

                3. –¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ kad.arbitr.ru, –°–ü–° "–ì–∞—Ä–∞–Ω—Ç" –∏–ª–∏ "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å", "–ö–æ–¥–µ–∫—Å" –∏–ª–∏ kad.arbitr.ru, —Ç–∞–∫ –∫–∞–∫ —É —Ç–µ–±—è –∏ —Ç–∞–∫ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–¥–µ–∫—Å–∞–º –∏ –∑–∞–∫–æ–Ω–∞–º.

                4. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–µ–±–µ –Ω–µ–ª—å–∑—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–∞—Ç—å –∫–∞–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è.

                5. –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–µ–¥—É–µ—Ç –≤–µ—Å—Ç–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, —Å—Ç—Ä–æ–≥–æ –∏–∑–±–µ–≥–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ."""

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    context_messages = []
    
    user_id = None
    message_id = None
    
    if thread_id and db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = db.query(Message).filter(
                Message.thread_id == thread_id,
                Message.role == "user"
            ).order_by(Message.created_at.desc()).limit(10).first()
            
            if user_message:
                message_id = user_message.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Ç—Ä–µ–¥–∞
            thread = db.query(Thread).filter(Thread.id == thread_id).first()
            if thread:
                user_id = thread.user_id
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    logs = []
    combined_context = ""
    search_tasks = []
    
    # 1. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ ElasticSearch (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º)
    @measure_time
    async def search_elasticsearch():
        try:
            es_results = search_law_chunks(user_query)
            if es_results:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(es_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ Elasticsearch")
                result_text = "## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n\n"
                for i, chunk in enumerate(es_results[:5]):  # –ë–µ—Ä–µ–º –¥–æ 5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    result_text += f"{chunk}\n\n"
                return result_text
            return ""
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ: {str(e)}")
            return ""
    
    # 2. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º)
    async def search_internet():
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            internet_logs = []
            
            search_results = await run_multiple_searches(
                query=user_query, 
                logs=internet_logs
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–∞ –≤ –æ–±—â–∏–µ –ª–æ–≥–∏
            if logs is not None and isinstance(logs, list):
                logs.extend(internet_logs)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
            successful_pages = 0
            failed_pages = 0
            all_web_results = []


            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
            for search_type, results in search_results.items():
                if results and isinstance(results, list):
                    for result in results:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ is_successful
                        if hasattr(result, 'is_successful') and callable(getattr(result, 'is_successful')):
                            try:
                                if result.is_successful():
                                    successful_pages += 1
                                    all_web_results.append(result)
                                else:
                                    failed_pages += 1
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ {result.url if hasattr(result, 'url') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL'}: "
                                                f"{result.error if hasattr(result, 'error') else '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")
                            except Exception as e:
                                failed_pages += 1
                                logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {str(e)}")
                        else:
                            # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –º–µ—Ç–æ–¥–∞ is_successful –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É
                            failed_pages += 1
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
                            url = getattr(result, 'url', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL')
                            error_msg = getattr(result, 'error', None)
                            has_content = bool(getattr(result, 'text', '').strip()) if hasattr(result, 'text') else False
                            
                            if has_content:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å—á–∏—Ç–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —É—Å–ª–æ–≤–Ω–æ —É—Å–ø–µ—à–Ω—ã–º
                                successful_pages += 1
                                failed_pages -= 1  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
                                all_web_results.append(result)
                                logging.info(f"‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –±–µ–∑ –º–µ—Ç–æ–¥–∞ is_successful, –Ω–æ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {url}")
                            else:
                                logging.warning(f"‚ö†Ô∏è –û–±—ä–µ–∫—Ç {type(result).__name__} –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ is_successful –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {url}"
                                            f"{f' (–æ—à–∏–±–∫–∞: {error_msg})' if error_msg else ''}")

            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: —É—Å–ø–µ—à–Ω–æ {successful_pages}, –Ω–µ—É–¥–∞—á–Ω–æ {failed_pages}")
            
            
            if all_web_results:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_web_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                result_text = "## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n\n"
                for i, result in enumerate(all_web_results[:5]):
                    logging.info(f"üìÑ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç —Å {result.url} ({len(result.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    result_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {result.url}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.title}\n{result.text[:2000]}...\n\n"
                return result_text
            else:
                logging.info("‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return ""
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ: {str(e)}")
            return ""
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–µ–∑ –ì–∞—Ä–∞–Ω—Ç–∞)
    search_tasks.append(search_elasticsearch())
    search_tasks.append(search_internet())
    
    search_results = await asyncio.gather(*search_tasks)
    
    # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤
    for result in search_results:
        if result:
            combined_context += result
    
    # 5. –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not combined_context.strip():
        logging.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
        combined_context = "## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
    user_query_with_context = f"""
            –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: 
            {user_query}

            –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê (–ü–æ–ª–µ–∑–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤):
            {combined_context}

            –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
            1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:
            - –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
            - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞

            2. –î–ª—è –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –∑–∞–ø—Ä–æ—Å–æ–≤:
            - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–º –Ω–æ—Ä–º–∞–º
            - –ü—Ä–∏–≤–µ–¥–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
            - –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            - –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

            3. –î–ª—è –û–ë–©–ò–• –≤–æ–ø—Ä–æ—Å–æ–≤:
            - –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –±–µ–∑ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ 
            - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
            """
                
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepResearch –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        deep_results = await deep_research_service.research(
            query=user_query_with_context,
            thread_id=thread_id,
            message_id=message_id,
            user_id=user_id,
            db=db
        )
        final_response = deep_results.analysis
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω thread_id
        if thread_id and db:
            try:
                db.add(Message(thread_id=thread_id, role="user", content=user_query))
                db.add(Message(thread_id=thread_id, role="assistant", content=final_response))
                db.commit()
                logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {e}")
        

        from app.services.deepresearch_service import ensure_valid_court_numbers
        final_response = ensure_valid_court_numbers(final_response, user_query)

        return final_response

    except Exception as e:
        error_msg = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}"
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if thread_id and db:
            try:
                db.add(Message(thread_id=thread_id, role="user", content=user_query))
                db.add(Message(thread_id=thread_id, role="assistant", content=error_msg))
                db.commit()
            except Exception as db_err:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ –≤ –ë–î: {db_err}")
        
        return error_msg