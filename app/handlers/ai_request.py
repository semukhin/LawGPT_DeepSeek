"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vertex AI API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.
"""
import json
import logging
from typing import Dict, Optional
from sqlalchemy.orm import Session 
from app.handlers.parallel_search import run_parallel_search
from app.utils import measure_time
from app.handlers.es_law_search import search_law_chunks
from app.handlers.garant_process import process_garant_request
from app.handlers.web_search import google_search, search_and_scrape
from app.services.deepresearch_service import DeepResearchService
from app.services.vertexai_service import VertexAIService
from app.context_manager import ContextManager
from app.models import Message 
from app.config import VERTEX_AI_SETTINGS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepResearchService
deep_research_service = DeepResearchService()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vertex AI
vertex_service = VertexAIService(
    project_id=VERTEX_AI_SETTINGS["project_id"],
    location=VERTEX_AI_SETTINGS["location"],
    model_name=VERTEX_AI_SETTINGS["model_name"],
    temperature=VERTEX_AI_SETTINGS["temperature"],
    max_output_tokens=VERTEX_AI_SETTINGS["max_output_tokens"],
    credentials_path=VERTEX_AI_SETTINGS["credentials_path"]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def log_function_call(function_name: str, arguments: Dict) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    logging.info(f"üîç –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê: {function_name}")
    logging.info(f"üîç –ê–†–ì–£–ú–ï–ù–¢–´: {json.dumps(arguments, ensure_ascii=False)}")

async def handle_function_call(function_name: str, arguments: Dict) -> Dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    query = arguments.get("query", "")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log_function_call(function_name, arguments)

    if function_name == "search_law_chunks":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ Elasticsearch –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            es_results = search_law_chunks(query)
            if es_results:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(es_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ Elasticsearch")
                for i, chunk in enumerate(es_results[:2]):  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 2 —á–∞–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    logging.info(f"üìÑ –ß–∞–Ω–∫ {i+1}: {chunk[:100]}...")
                
                deep_results = await deep_research_service.research("\n".join(es_results))
                return {"deep_research_results": deep_results.to_dict()}
            logging.info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {"error": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ: {str(e)}"}

    elif function_name == "search_garant":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –ì–∞—Ä–∞–Ω—Ç–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ process_garant_request
            def rag_module(level, message):
                logging_level = getattr(logging, level.upper(), logging.INFO)
                logging.log(logging_level, message)
                return f"[{level.upper()}] {message}"
                
            garant_results = process_garant_request(query, logs=[], rag_module=rag_module)
            if garant_results:
                logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ì–∞—Ä–∞–Ω—Ç–∞: {garant_results.get('docx_file_path', '')}")
                deep_results = await deep_research_service.research(garant_results.get("docx_file_path", ""))
                return {"deep_research_results": deep_results.to_dict()}
            logging.info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ì–∞—Ä–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {"error": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ì–∞—Ä–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ì–∞—Ä–∞–Ω—Ç–µ: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ì–∞—Ä–∞–Ω—Ç–µ: {str(e)}"}

    elif function_name == "search_web":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            logs = []
            search_results = await search_and_scrape(query, logs)
            
            if search_results:
                extracted_texts = []
                for result in search_results:
                    if result.is_successful():
                        extracted_texts.append({
                            "url": result.url,
                            "title": result.title,
                            "text": result.text[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                        })
                
                if extracted_texts:
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(extracted_texts)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü")
                    
                    combined_text = "\n\n".join([
                        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {item['url']}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {item['title']}\n{item['text']}"
                        for item in extracted_texts
                    ])
                    
                    deep_results = await deep_research_service.research(combined_text)
                    return {"deep_research_results": deep_results.to_dict()}
                
            logging.info("‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {"error": "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ: {str(e)}"}
    
    elif function_name == "deep_research":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            deep_results = await deep_research_service.research(query)
            return {"deep_research_results": deep_results.to_dict()}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}"}
            
    return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"}


@measure_time
async def send_custom_request(user_query: str, thread_id: Optional[str] = None, db: Optional[Session] = None) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫ Vertex AI.
    
    Args:
        user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        thread_id: ID —Ç—Ä–µ–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    logging.info(f"üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query[:100]}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    system_prompt = """
    –¢—ã - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LawGPT, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é, –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.
    
    –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤:
    1. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    2. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
    3. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏ - –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    4. –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã, –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
    
    –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
    - search_law_chunks: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    - search_garant: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –ì–∞—Ä–∞–Ω—Ç
    - search_web: –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    - deep_research: –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
    
    –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    context_messages = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å thread_id –∏ db, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ–¥–∞
    if thread_id and db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ–¥–∞ (–Ω–µ –±–æ–ª–µ–µ 10)
            previous_messages = db.query(Message).filter(
                Message.thread_id == thread_id
            ).order_by(Message.created_at.desc()).limit(10).all()
            
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            previous_messages.reverse()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            for msg in previous_messages:
                if msg.role in ["user", "assistant"]:
                    context_messages.append({"role": msg.role, "content": msg.content})
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages = [
        {"role": "system", "content": system_prompt}
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if context_messages:
        messages.extend(context_messages)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "content": user_query})
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Vertex AI
        response = await vertex_service.chat_completion(messages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        if "—Ñ—É–Ω–∫—Ü–∏—è:" in response.lower() or "function:" in response.lower():
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                function_name = None
                arguments = {}
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                lines = response.split('\n')
                for i, line in enumerate(lines):
                    if "—Ñ—É–Ω–∫—Ü–∏—è:" in line.lower() or "function:" in line.lower():
                        parts = line.split(':', 1)
                        if len(parts) > 1:
                            function_name = parts[1].strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                    if function_name and ("–∞—Ä–≥—É–º–µ–Ω—Ç—ã:" in line.lower() or "arguments:" in line.lower()):
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                        json_str = ""
                        j = i + 1
                        while j < len(lines) and not lines[j].strip().startswith(("—Ñ—É–Ω–∫—Ü–∏—è:", "function:")):
                            json_str += lines[j] + "\n"
                            j += 1
                        
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                            arguments = json.loads(json_str)
                        except json.JSONDecodeError:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏–∑–≤–ª–µ–∫–∞–µ–º query –Ω–∞–ø—Ä—è–º—É—é
                            arguments = {"query": user_query}
                
                # –ï—Å–ª–∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
                if function_name:
                    function_result = await handle_function_call(function_name, arguments)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                    function_response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}:\n{json.dumps(function_result, ensure_ascii=False, indent=2)}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                    messages.append({"role": "assistant", "content": response})
                    messages.append({"role": "user", "content": function_response})
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    final_response = await vertex_service.chat_completion(messages)
                    return final_response
            except Exception as func_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏: {func_error}")
        
        return response
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vertex AI: {e}")
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ. –û—à–∏–±–∫–∞: {str(e)}"