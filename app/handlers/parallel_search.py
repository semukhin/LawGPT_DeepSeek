import logging
from typing import Dict, Any, List
from app.handlers.es_law_search import search_law_chunks
from app.handlers.web_search import WebSearchHandler
import asyncio
import time
import re
import chardet
from app.handlers.web_search import run_multiple_searches
from app.services.query_optimizer import QueryOptimizer
from app.services.tavily_service import TavilyService
from app.utils.logger import get_logger, LogLevel
import json
import os
import hashlib
from app.handlers.es_law_search import search_law_chunks_multi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º logger
logger = get_logger()

def ensure_correct_encoding(text: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è UTF-8.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –¢–µ–∫—Å—Ç –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8
    """
    if not text:
        return ""

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    if isinstance(text, str):
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ URL-–∫–æ–¥–∏—Ä–æ–≤–∫–µ
            text = re.sub(r'%D0%[89AB][0-9A-F]%D0%[89AB][0-9A-F]', 
                         lambda m: bytes.fromhex(m.group(0).replace('%', '')).decode('utf-8'), 
                         text)
            text = re.sub(r'%D0%[89AB][0-9A-F]', 
                         lambda m: bytes.fromhex(m.group(0).replace('%', '')).decode('utf-8'), 
                         text)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            replacements = {
                '√ê¬∞': '–∞', '√ê¬±': '–±', '√ê¬≤': '–≤', '√ê¬≥': '–≥', '√ê¬¥': '–¥',
                '√ê¬µ': '–µ', '√ë': '—ë', '√ê¬∂': '–∂', '√ê¬∑': '–∑', '√ê¬∏': '–∏',
                '√ê¬π': '–π', '√ê¬∫': '–∫', '√ê¬ª': '–ª', '√ê¬º': '–º', '√ê¬Ω': '–Ω',
                '√ê¬æ': '–æ', '√ê¬ø': '–ø', '√ë‚Ç¨': '—Ä', '√ë': '—Å', '√ë‚Äö': '—Ç',
                '√ë∆í': '—É', '√ë‚Äû': '—Ñ', '√ë‚Ä¶': '—Ö', '√ë‚Ä†': '—Ü', '√ë‚Ä°': '—á',
                '√ëÀÜ': '—à', '√ë‚Ä∞': '—â', '√ë≈†': '—ä', '√ë‚Äπ': '—ã', '√ë≈í': '—å',
                '√ë': '—ç', '√ë≈æ': '—é', '√ë': '—è'
            }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
            for wrong, correct in replacements.items():
                text = text.replace(wrong, correct)
            
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ bytes –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            text = text.encode('utf-8', errors='ignore').decode('utf-8')
            
            # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
            text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]', '', text)
            text = re.sub(r'\s+', ' ', text)
            
            return text.strip()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
            return text
            
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤ bytes
    if isinstance(text, bytes):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            detected = chardet.detect(text)
            if detected and detected['encoding']:
                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                return text.decode(detected['encoding'], errors='ignore')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ bytes: {e}")
            pass
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É, –ø—Ä–æ–±—É–µ–º UTF-8
        try:
            return text.decode('utf-8', errors='ignore')
        except UnicodeError:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Latin-1
            return text.decode('latin1', errors='ignore')
            
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    return str(text)

async def run_parallel_search(query: str, limit: int = 5) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
    try:
        tavily_service = TavilyService()
        es_results, tavily_results = await asyncio.gather(
            search_law_chunks(query, limit),
            tavily_service.search(query, limit)
        )
        return {
            "es_results": es_results if isinstance(es_results, list) else [],
            "tavily_results": tavily_results if isinstance(tavily_results, list) else []
        }
    except Exception as e:
        logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ: {str(e)}", LogLevel.ERROR)
        return {
            "es_results": [],
            "tavily_results": []
        }

async def search_tavily(query: str) -> List[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Tavily API.
    """
    logging.info(f"üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≤ Tavily –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    try:
        tavily_service = TavilyService()
        results = await tavily_service.search(query, max_results=5)
        if not isinstance(results, list):
            logging.warning(f"Tavily: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(results)}")
            return []
        if not results:
            logging.warning("‚ùå Tavily –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return []
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Tavily")
        return results
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Tavily: {str(e)}")
        return []