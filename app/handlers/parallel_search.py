import logging
from typing import Dict, Any
from app.handlers.es_law_search import search_law_chunks
from app.handlers.web_search import search_and_scrape
import asyncio
import time
import re
import chardet
from app.handlers.web_search import run_multiple_searches

def ensure_correct_encoding(text: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è UTF-8.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –¢–µ–∫—Å—Ç –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8
    """
    if not text:
        return ""

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    if isinstance(text, str):
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ URL-–∫–æ–¥–∏—Ä–æ–≤–∫–µ
            text = re.sub(r'%D0%[89AB][0-9A-F]%D0%[89AB][0-9A-F]', 
                         lambda m: bytes.fromhex(m.group(0).replace('%', '')).decode('utf-8'), 
                         text)
            text = re.sub(r'%D0%[89AB][0-9A-F]', 
                         lambda m: bytes.fromhex(m.group(0).replace('%', '')).decode('utf-8'), 
                         text)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            replacements = {
                '√ê¬∞': '–∞', '√ê¬±': '–±', '√ê¬≤': '–≤', '√ê¬≥': '–≥', '√ê¬¥': '–¥',
                '√ê¬µ': '–µ', '√ë': '—ë', '√ê¬∂': '–∂', '√ê¬∑': '–∑', '√ê¬∏': '–∏',
                '√ê¬π': '–π', '√ê¬∫': '–∫', '√ê¬ª': '–ª', '√ê¬º': '–º', '√ê¬Ω': '–Ω',
                '√ê¬æ': '–æ', '√ê¬ø': '–ø', '√ë‚Ç¨': '—Ä', '√ë': '—Å', '√ë‚Äö': '—Ç',
                '√ë∆í': '—É', '√ë‚Äû': '—Ñ', '√ë‚Ä¶': '—Ö', '√ë‚Ä†': '—Ü', '√ë‚Ä°': '—á',
                '√ëÀÜ': '—à', '√ë‚Ä∞': '—â', '√ë≈†': '—ä', '√ë‚Äπ': '—ã', '√ë≈í': '—å',
                '√ë': '—ç', '√ë≈æ': '—é', '√ë': '—è'
            }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
            for wrong, correct in replacements.items():
                text = text.replace(wrong, correct)
            
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ bytes –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            text = text.encode('utf-8', errors='ignore').decode('utf-8')
            
            # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
            text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]', '', text)
            text = re.sub(r'\s+', ' ', text)
            
            return text.strip()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
            return text
            
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤ bytes
    if isinstance(text, bytes):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            detected = chardet.detect(text)
            if detected and detected['encoding']:
                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                return text.decode(detected['encoding'], errors='ignore')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ bytes: {e}")
            pass
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É, –ø—Ä–æ–±—É–µ–º UTF-8
        try:
            return text.decode('utf-8', errors='ignore')
        except UnicodeError:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Latin-1
            return text.decode('latin1', errors='ignore')
            
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    return str(text)

async def run_parallel_search(query: str) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.
    """
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    search_results = {}
    combined_context = ""
    start_time = time.time()
    
    try:
        # 1. –ü–æ–∏—Å–∫ –≤ Elasticsearch
        logging.info("‚è≥ –ü–æ–∏—Å–∫ –≤ Elasticsearch...")
        try:
            es_results = search_law_chunks(query)
            if es_results:
                search_results["elasticsearch"] = es_results
                combined_context += "\n\n## –†–æ—Å—Å–∏–π—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ:\n\n"
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–æ–≤–∞—Ä–∏
                formatted_results = []
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä —Å—É–¥–µ–±–Ω–æ–≥–æ –¥–µ–ª–∞
                case_number_pattern = r'[–êA]\d{1,2}-\d+/\d{2,4}(?:-[–ê-–Ø–∞-—èA-Za-z0-9]+)*'
                has_case_number = bool(re.search(case_number_pattern, query))
                
                for result in es_results:
                    if isinstance(result, dict):
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –¥–µ–ª–∞,
                        # –±–µ—Ä–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                        if has_case_number and result.get('source') == 'court_decisions':
                            text = result.get('text', '')
                        else:
                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                            text = result.get('text', '')[:5000]
                        
                        source = result.get('source', '')
                        formatted_text = f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n{text}" if source else text
                        formatted_results.append(formatted_text)
                    else:
                        formatted_results.append(str(result))
                
                # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
                max_results = 10 if has_case_number else 7
                combined_context += "\n\n---\n\n".join(formatted_results[:max_results])
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Elasticsearch: {e}")
            
        # 2. –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        logging.info("‚è≥ –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
        try:
            from app.handlers.web_search import run_multiple_searches
            web_results = await run_multiple_searches(query, [])
            if web_results and isinstance(web_results, dict):
                search_results["web"] = web_results
                if web_results.get("general"):
                    combined_context += "\n\n## –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n"
                    for result in web_results["general"][:10]:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if isinstance(result, dict) and result.get("url") and result.get("text"):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞
                            text = ensure_correct_encoding(result['text'])
                            combined_context += f"### –ò—Å—Ç–æ—á–Ω–∏–∫: {result['url']}\n\n"
                            combined_context += f"{text[:5000]}\n\n---\n\n"  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {e}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        search_results["combined_context"] = combined_context
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        elapsed_time = time.time() - start_time
        logging.info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return search_results
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ: {e}")
        return {"error": str(e)}