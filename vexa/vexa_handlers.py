# app/handlers/vexa_handlers.py
"""
API —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vexa.ai
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∏ –ø–æ–∏—Å–∫–∞
"""
import base64
import os
import json
import logging
import time
from typing import List, Dict, Any, Optional
from datetime import datetime

from fastapi import (
    APIRouter, 
    Depends, 
    HTTPException, 
    WebSocket, 
    status,
    Request, 
    File, 
    Form, 
    Query, 
    UploadFile
)
from fastapi.responses import JSONResponse
from fastapi.websockets import WebSocketDisconnect  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç WebSocketDisconnect
from sqlalchemy.orm import Session

from app import models
from app.models import User
from app.database import get_db
from app.auth import get_current_user
from cryptography.fernet import Fernet

# –ò–º–ø–æ—Ä—Ç VexaApiClient –∏–∑ –≤–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
from vexa.vexa_api_client import VexaApiClient 

from fastapi import APIRouter, Depends, HTTPException, Header, UploadFile, File, Form, Query, WebSocket, status
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session

from app import models
from app.config import VEXA_INTEGRATION_ENABLED
from vexa.vexa_api_client import VexaApiClient, MeetingInfo, TranscriptSegment, MeetingSummary
from vexa.vexa_integration_models import VexaMeeting, VexaTranscript, VexaMeetingSummary, VexaIntegrationSettings, VexaAudioStream, extend_user_model

from fastapi.security import OAuth2PasswordBearer
import time
from datetime import datetime, timedelta

from functools import lru_cache

# –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
token_cache = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
VEXA_API_KEY = os.getenv("VEXA_API_KEY")
VEXA_STREAM_URL = os.getenv("VEXA_STREAM_URL", "https://streamqueue.dev.vexa.ai")
VEXA_ENGINE_URL = os.getenv("VEXA_ENGINE_URL", "https://engine.dev.vexa.ai")
VEXA_TRANSCRIPTION_URL = os.getenv("VEXA_TRANSCRIPTION_URL", "https://transcription.dev.vexa.ai")
ENCRYPTION_KEY = os.getenv("VEXA_ENCRYPTION_KEY")
if not ENCRYPTION_KEY:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    ENCRYPTION_KEY = Fernet.generate_key().decode()
    print(f"Generated new encryption key: {ENCRYPTION_KEY}")
    print("Save this key in your environment variables as VEXA_ENCRYPTION_KEY")


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = APIRouter(
    prefix="/api/vexa",
    tags=["vexa"],
    responses={404: {"description": "Not found"}},
)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENCRYPTION_KEY = os.getenv("VEXA_ENCRYPTION_KEY")

# –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
if not ENCRYPTION_KEY:
    print("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Vexa")
    ENCRYPTION_KEY = Fernet.generate_key().decode()
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: {ENCRYPTION_KEY}")
    print("–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è VEXA_ENCRYPTION_KEY")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
def get_valid_fernet_key(key_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–ª—é—á–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Fernet"""
    if not key_str:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        return Fernet.generate_key()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        key_bytes = key_str.encode() if isinstance(key_str, str) else key_str
        if len(base64.urlsafe_b64decode(key_bytes)) != 32:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–ª—é—á–∞")
        return key_bytes
    except Exception as e:
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á: {e}. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π.")
        return Fernet.generate_key()

# –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç Fernet
cipher_suite = Fernet(get_valid_fernet_key(ENCRYPTION_KEY))

def encrypt_token(token: str) -> str:
    """–®–∏—Ñ—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    return cipher_suite.encrypt(token.encode()).decode()

def decrypt_token(encrypted_token: str) -> str:
    """–î–µ—à–∏—Ñ—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return cipher_suite.decrypt(encrypted_token.encode()).decode()



class VexaApiClientStub:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è VexaApiClient, 
    –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
    """
    def __init__(self, *args, **kwargs):
        logger.warning("Vexa API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏.")
    
    async def check_connection(self) -> bool:
        return False
    
    async def register_user(self, user_id: str, user_email: Optional[str] = None) -> Dict[str, Any]:
        logger.info(f"–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return {
            "user_id": user_id,
            "token": "mock_token",
            "registered_at": "2024-01-01T00:00:00"
        }
    
    async def start_meeting(self, meeting_info) -> Dict[str, Any]:
        logger.info(f"–ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_info.meeting_id}")
        return {"status": "mock_meeting_created"}
    
    async def end_meeting(self, meeting_id: str) -> Dict[str, Any]:
        logger.info(f"–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
        return {"status": "mock_meeting_ended"}
    
    async def get_meeting_transcripts(self, meeting_id: str) -> list:
        logger.info(f"–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
        return []
    
    async def search_transcripts(self, query: str, user_id: Optional[str] = None, limit: int = 10) -> list:
        logger.info(f"–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞—Ö: {query}")
        return []
    
# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Vexa
@lru_cache(maxsize=1)
def get_vexa_client():
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Vexa
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
    """
    if VEXA_INTEGRATION_ENABLED:
        try:
            from vexa.vexa_api_client import VexaApiClient
            return VexaApiClient(
                api_key=VEXA_API_KEY,
                stream_url=os.getenv("VEXA_STREAM_URL"),
                engine_url=os.getenv("VEXA_ENGINE_URL"),
                transcription_url=os.getenv("VEXA_TRANSCRIPTION_URL")
            )
        except ImportError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å VexaApiClient. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
            return VexaApiClientStub()
    else:
        return VexaApiClientStub()



def encrypt_token(token: str) -> str:
    """–®–∏—Ñ—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    return cipher_suite.encrypt(token.encode()).decode()

def decrypt_token(encrypted_token: str) -> str:
    """–î–µ—à–∏—Ñ—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return cipher_suite.decrypt(encrypted_token.encode()).decode()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vexa –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_vexa_settings(user: models.User, db: Session):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vexa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = db.query(VexaIntegrationSettings).filter(VexaIntegrationSettings.user_id == user.id).first()
    
    if not settings:
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Vexa –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        vexa_client = get_vexa_client()
        registration = await vexa_client.register_user(str(user.id), user.email)
        
        # –®–∏—Ñ—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        encrypted_token = encrypt_token(registration.get("token"))
        
        settings = VexaIntegrationSettings(
            user_id=user.id,
            enable_recording=True,
            enable_summary=True,
            enable_search=True,
            vexa_token=encrypted_token,
            browser_extension_installed=False,
            updated_at=datetime.now()
        )
        
        db.add(settings)
        db.commit()
        db.refresh(settings)
    
    return settings

# –†–æ—É—Ç–µ—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vexa
@router.get("/settings")
async def get_vexa_integration_settings(
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Vexa
    """
    settings = await get_user_vexa_settings(current_user, db)
    
    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ, —Ç–æ–ª—å–∫–æ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
    return {
        "user_id": current_user.id,
        "enable_recording": settings.enable_recording,
        "enable_summary": settings.enable_summary,
        "enable_search": settings.enable_search,
        "has_token": bool(settings.vexa_token),
        "browser_extension_installed": settings.browser_extension_installed,
        "updated_at": settings.updated_at.isoformat() if settings.updated_at else None
    }

@router.post("/settings")
async def update_vexa_integration_settings(
    enable_recording: bool = Form(...),
    enable_summary: bool = Form(...),
    enable_search: bool = Form(...),
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Vexa
    """
    settings = await get_user_vexa_settings(current_user, db)
    
    settings.enable_recording = enable_recording
    settings.enable_summary = enable_summary
    settings.enable_search = enable_search
    settings.updated_at = datetime.now()
    
    db.commit()
    db.refresh(settings)
    
    return {
        "user_id": current_user.id,
        "enable_recording": settings.enable_recording,
        "enable_summary": settings.enable_summary,
        "enable_search": settings.enable_search,
        "has_token": bool(settings.vexa_token),
        "browser_extension_installed": settings.browser_extension_installed,
        "updated_at": settings.updated_at.isoformat() if settings.updated_at else None
    }

@router.post("/extension/install")
async def mark_extension_installed(
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    """
    settings = await get_user_vexa_settings(current_user, db)
    
    settings.browser_extension_installed = True
    settings.updated_at = datetime.now()
    
    db.commit()
    db.refresh(settings)
    
    return {"status": "success", "message": "–°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω"}

@router.get("/extension/token")
async def get_extension_token(
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    """
    settings = await get_user_vexa_settings(current_user, db)
    
    if not settings.vexa_token:
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ
        registration = await vexa_client.register_user(str(current_user.id), current_user.email)
        
        # –®–∏—Ñ—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        settings.vexa_token = encrypt_token(registration.get("token"))
        settings.updated_at = datetime.now()
        
        db.commit()
        db.refresh(settings)
    
    # –î–µ—à–∏—Ñ—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    token = decrypt_token(settings.vexa_token)
    
    return {
        "token": token,
        "extension_config": {
            "stream_url": VEXA_STREAM_URL,
            "enable_recording": settings.enable_recording,
            "user_id": str(current_user.id),
            "extension_version": "1.0.0"
        }
    }

# –†–æ—É—Ç–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏
@router.post("/meetings")
async def create_meeting(
    title: str = Form(...),
    source_type: str = Form(...),
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vexa
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await get_user_vexa_settings(current_user, db)
    
    if not settings.enable_recording:
        raise HTTPException(status_code=403, detail="–ó–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –≤—Å—Ç—Ä–µ—á–∏ –∏ ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    meeting_id = f"lawgpt_meeting_{int(time.time())}_{current_user.id}"
    connection_id = f"conn_{int(time.time())}_{current_user.id}"
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –≤ –ë–î
    db_meeting = VexaMeeting(
        vexa_meeting_id=meeting_id,
        user_id=current_user.id,
        title=title,
        start_time=datetime.now(),
        status="active",
        source_type=source_type,
        connection_id=connection_id,
        meeting_metadata=json.dumps({
            "created_by": "lawgpt",
            "user_id": str(current_user.id),
            "user_email": current_user.email
        })
    )
    db.add(db_meeting)
    db.commit()
    db.refresh(db_meeting)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ Vexa
    meeting_info = MeetingInfo(
        meeting_id=meeting_id,
        title=title,
        start_time=db_meeting.start_time,
        source_type=source_type,
        connection_id=connection_id,
        metadata={
            "user_id": str(current_user.id),
            "user_email": current_user.email
        }
    )
    
    try:
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç - –∑–∞–≥–ª—É—à–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock-–æ—Ç–≤–µ—Ç
        if isinstance(vexa_client, VexaApiClientStub):
            vexa_response = {
                "status": "mock_meeting_created",
                "meeting_id": meeting_id
            }
        else:
            vexa_response = await vexa_client.start_meeting(meeting_info)
        
        return {
            "id": db_meeting.id,
            "meeting_id": meeting_id,
            "title": title,
            "start_time": db_meeting.start_time.isoformat(),
            "connection_id": connection_id,
            "status": "active",
            "source_type": source_type,
            "vexa_response": vexa_response
        }
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        db.delete(db_meeting)
        db.commit()
        
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {str(e)}")

@router.post("/meetings/{meeting_id}/end")
async def end_meeting(
    meeting_id: str,
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É
    """
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å—Ç—Ä–µ—á—É –≤ –ë–î
    db_meeting = db.query(VexaMeeting).filter(
        VexaMeeting.vexa_meeting_id == meeting_id,
        VexaMeeting.user_id == current_user.id
    ).first()
    
    if not db_meeting:
        raise HTTPException(status_code=404, detail="–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if db_meeting.status != "active":
        raise HTTPException(status_code=400, detail="–í—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å—Ç—Ä–µ—á–∏ –≤ –ë–î
    db_meeting.status = "completed"
    db_meeting.end_time = datetime.now()
    db.commit()
    db.refresh(db_meeting)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ Vexa
    try:
        vexa_response = await vexa_client.end_meeting(meeting_id)
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        settings = await get_user_vexa_settings(current_user, db)
        
        if settings.enable_summary:
            try:
                summary = await vexa_client.generate_meeting_summary(meeting_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –ë–î
                db_summary = VexaMeetingSummary(
                    meeting_id=db_meeting.id,
                    summary_text=summary.summary_text,
                    key_points=json.dumps(summary.key_points) if summary.key_points else None,
                    action_items=json.dumps(summary.action_items) if summary.action_items else None,
                    generated_at=summary.generated_at
                )
                db.add(db_summary)
                db.commit()
                
                vexa_response["summary"] = {
                    "generated": True,
                    "summary_text": summary.summary_text[:100] + "..." if len(summary.summary_text) > 100 else summary.summary_text
                }
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")
                vexa_response["summary"] = {
                    "generated": False,
                    "error": str(e)
                }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã
        try:
            transcripts = await vexa_client.get_meeting_transcripts(meeting_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –≤ –ë–î
            for transcript in transcripts:
                db_transcript = VexaTranscript(
                    meeting_id=db_meeting.id,
                    vexa_transcript_id=transcript.transcript_id,
                    speaker=transcript.speaker,
                    start_time=transcript.start_time,
                    end_time=transcript.end_time,
                    text=transcript.text,
                    confidence=transcript.confidence
                )
                db.add(db_transcript)
            
            db.commit()
            
            vexa_response["transcripts"] = {
                "count": len(transcripts),
                "saved": True
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤: {str(e)}")
            vexa_response["transcripts"] = {
                "count": 0,
                "saved": False,
                "error": str(e)
            }
        
        return {
            "id": db_meeting.id,
            "meeting_id": meeting_id,
            "title": db_meeting.title,
            "start_time": db_meeting.start_time.isoformat(),
            "end_time": db_meeting.end_time.isoformat() if db_meeting.end_time else None,
            "status": db_meeting.status,
            "vexa_response": vexa_response
        }
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å—Ç—Ä–µ—á–∏
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ –≤ Vexa: {str(e)}")

# –ü—Ä–æ—Å—Ç–æ–π in-memory –ª–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
class RateLimiter:
    def __init__(self, requests_limit: int = 100, window_seconds: int = 60):
        self.requests_limit = requests_limit
        self.window_seconds = window_seconds
        self.requests = {}  # user_id -> [timestamps]
    
    def is_rate_limited(self, user_id: str) -> bool:
        now = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.requests:
            self.requests[user_id] = []
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.requests[user_id] = [ts for ts in self.requests[user_id] 
                                  if now - ts < self.window_seconds]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if len(self.requests[user_id]) >= self.requests_limit:
            return True
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.requests[user_id].append(now)
        return False

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–∏–º–∏—Ç–µ—Ä–∞
rate_limiter = RateLimiter()

def rate_limit_dependency(
    request: Request,
    current_user: models.User = Depends(get_current_user)
):
    """–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if rate_limiter.is_rate_limited(str(current_user.id)):
        raise HTTPException(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            detail="Rate limit exceeded. Please try again later."
        )
    return current_user

@router.get("/meetings")
async def get_meetings(
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    status: Optional[str] = Query(None, description="Filter by meeting status"),
    date_from: Optional[datetime] = Query(None, description="Filter by start date (from)"),
    date_to: Optional[datetime] = Query(None, description="Filter by start date (to)"),
    sort_by: str = Query("start_time", description="Field to sort by"),
    sort_order: str = Query("desc", description="Sort order (asc or desc)"),
    current_user: models.User = Depends(rate_limit_dependency),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    """
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = db.query(VexaMeeting).filter(VexaMeeting.user_id == current_user.id)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if status:
        query = query.filter(VexaMeeting.status == status)
    
    if date_from:
        query = query.filter(VexaMeeting.start_time >= date_from)
    
    if date_to:
        query = query.filter(VexaMeeting.start_time <= date_to)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    total_count = query.count()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_column = getattr(VexaMeeting, sort_by, VexaMeeting.start_time)
    if sort_order.lower() == "asc":
        query = query.order_by(sort_column.asc())
    else:
        query = query.order_by(sort_column.desc())
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    meetings = query.offset(offset).limit(limit).all()
    
    result = []
    for meeting in meetings:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∞–º–º–∞—Ä–∏
        summary = db.query(VexaMeetingSummary).filter(VexaMeetingSummary.meeting_id == meeting.id).first()
        
        meeting_data = {
            "id": meeting.id,
            "meeting_id": meeting.vexa_meeting_id,
            "title": meeting.title,
            "start_time": meeting.start_time.isoformat(),
            "end_time": meeting.end_time.isoformat() if meeting.end_time else None,
            "status": meeting.status,
            "source_type": meeting.source_type,
            "has_summary": summary is not None,
            "duration": (meeting.end_time - meeting.start_time).total_seconds() if meeting.end_time else None
        }
        
        result.append(meeting_data)
    
    return {
        "meetings": result,
        "total": total_count,
        "offset": offset,
        "limit": limit
    }

def verify_meeting_ownership(meeting_id: str, user_id: int, db: Session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    meeting = db.query(VexaMeeting).filter(
        VexaMeeting.vexa_meeting_id == meeting_id,
        VexaMeeting.user_id == user_id
    ).first()
    
    if not meeting:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Meeting not found or you don't have access to it"
        )
    
    return meeting

@router.get("/meetings/{meeting_id}")
async def get_meeting_details(
    meeting_id: str,
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–µ–π
    meeting = verify_meeting_ownership(meeting_id, current_user.id, db)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å—Ç—Ä–µ—á—É –≤ –ë–î
    db_meeting = db.query(VexaMeeting).filter(
        VexaMeeting.vexa_meeting_id == meeting_id,
        VexaMeeting.user_id == current_user.id
    ).first()
    
    if not db_meeting:
        raise HTTPException(status_code=404, detail="–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–º–∞—Ä–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    summary = db.query(VexaMeetingSummary).filter(VexaMeetingSummary.meeting_id == db_meeting.id).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
    transcript_count = db.query(VexaTranscript).filter(VexaTranscript.meeting_id == db_meeting.id).count()
    
    return {
        "id": db_meeting.id,
        "meeting_id": db_meeting.vexa_meeting_id,
        "title": db_meeting.title,
        "start_time": db_meeting.start_time.isoformat(),
        "end_time": db_meeting.end_time.isoformat() if db_meeting.end_time else None,
        "status": db_meeting.status,
        "source_type": db_meeting.source_type,
        "connection_id": db_meeting.connection_id,
        "metadata": json.loads(db_meeting.meeting_metadata) if db_meeting.meeting_metadata else None,
        "summary": {
            "available": summary is not None,
            "summary_text": summary.summary_text if summary else None,
            "key_points": json.loads(summary.key_points) if summary and summary.key_points else None,
            "action_items": json.loads(summary.action_items) if summary and summary.action_items else None,
            "generated_at": summary.generated_at.isoformat() if summary and summary.generated_at else None
        },
        "transcripts": {
            "count": transcript_count
        }
    }

@router.get("/meetings/{meeting_id}/transcript")
async def get_meeting_transcript(
    meeting_id: str,
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏
    """
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å—Ç—Ä–µ—á—É –≤ –ë–î
    db_meeting = db.query(VexaMeeting).filter(
        VexaMeeting.vexa_meeting_id == meeting_id,
        VexaMeeting.user_id == current_user.id
    ).first()
    
    if not db_meeting:
        raise HTTPException(status_code=404, detail="–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã
    transcripts = db.query(VexaTranscript).filter(
        VexaTranscript.meeting_id == db_meeting.id
    ).order_by(
        VexaTranscript.start_time
    ).all()
    
    if not transcripts:
        raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    result = []
    for transcript in transcripts:
        transcript_data = {
            "id": transcript.id,
            "transcript_id": transcript.vexa_transcript_id,
            "speaker": transcript.speaker,
            "start_time": transcript.start_time.isoformat(),
            "end_time": transcript.end_time.isoformat() if transcript.end_time else None,
            "text": transcript.text,
            "confidence": transcript.confidence
        }
        
        result.append(transcript_data)
    
    return {
        "meeting_id": meeting_id,
        "title": db_meeting.title,
        "segments": result,
        "count": len(result)
    }

# –†–æ—É—Ç–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º
@router.post("/search")
async def search_in_transcripts(
    query: str = Form(...),
    limit: int = Form(10),
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    –ò—â–µ—Ç –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞—Ö –≤—Å—Ç—Ä–µ—á –ø–æ –∑–∞–ø—Ä–æ—Å—É
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await get_user_vexa_settings(current_user, db)
    
    if not settings.enable_search:
        raise HTTPException(status_code=403, detail="–ü–æ–∏—Å–∫ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ Vexa
    try:
        search_results = await vexa_client.search_transcripts(query, str(current_user.id), limit)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_results = []
        for result in search_results:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å—Ç—Ä–µ—á—É –≤ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            meeting_id = result.get("meeting_id")
            db_meeting = db.query(VexaMeeting).filter(
                VexaMeeting.vexa_meeting_id == meeting_id,
                VexaMeeting.user_id == current_user.id
            ).first()
            
            if db_meeting:
                formatted_result = {
                    "text": result.get("text", ""),
                    "speaker": result.get("speaker", ""),
                    "meeting_id": meeting_id,
                    "meeting_title": db_meeting.title,
                    "meeting_date": db_meeting.start_time.isoformat(),
                    "timestamp": result.get("timestamp", 0),
                    "score": result.get("score", 0)
                }
                
                formatted_results.append(formatted_result)
        
        return {
            "query": query,
            "results": formatted_results,
            "count": len(formatted_results)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞—Ö: {str(e)}")

# –†–æ—É—Ç–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
@router.put("/stream/audio")
async def upload_audio_chunk(
    chunk_index: int = Query(...),
    connection_id: str = Query(...),
    meeting_id: Optional[str] = Query(None),
    source_type: str = Query("google_meet"),
    audio_file: UploadFile = File(...),
    sample_rate: int = Query(16000, description="Audio sample rate"),
    channels: int = Query(1, description="Audio channels count"),
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ—á–∞–Ω–∫ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ä–º–∞—Ç–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await get_user_vexa_settings(current_user, db)
    
    if not settings.enable_recording:
        raise HTTPException(status_code=403, detail="–ó–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    content_type = audio_file.content_type
    valid_audio_types = ["audio/webm", "audio/wav", "audio/ogg", "audio/mpeg"]
    
    if content_type and content_type not in valid_audio_types:
        logger.warning(f"Unusual content type for audio: {content_type}")
    
    # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
    audio_data = await audio_file.read()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–± –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    stream = db.query(VexaAudioStream).filter(
        VexaAudioStream.connection_id == connection_id,
        VexaAudioStream.user_id == current_user.id
    ).first()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if not stream:
        stream = VexaAudioStream(
            connection_id=connection_id,
            user_id=current_user.id,
            source_type=source_type,
            stream_status="active",
            last_activity=datetime.now(),
            stream_metadata=json.dumps({
                "content_type": content_type,
                "sample_rate": sample_rate,
                "channels": channels,
                "first_chunk": chunk_index
            })
        )
       
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω meeting_id, —Å–≤—è–∑—ã–≤–∞–µ–º —Å –Ω–∏–º
        if meeting_id:
            db_meeting = db.query(VexaMeeting).filter(
                VexaMeeting.vexa_meeting_id == meeting_id,
                VexaMeeting.user_id == current_user.id
            ).first()
            
            if db_meeting:
                stream.meeting_id = db_meeting.id
        
        db.add(stream)
        db.commit()
        db.refresh(stream)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        stream.last_activity = datetime.now()
        db.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ Vexa
    try:
        result = await vexa_client.upload_audio_chunk(
            connection_id=connection_id,
            chunk_index=chunk_index,
            audio_data=audio_data,
            meeting_id=meeting_id,
            source=source_type
        )
        
        if not result.get("success", False):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—á–∞–Ω–∫–∞ –≤ Vexa: {result.get('error')}")
            return {"status": "error", "message": result.get("error")}
        
        return {"status": "success", "message": "–ê—É–¥–∏–æ—á–∞–Ω–∫ –∑–∞–≥—Ä—É–∂–µ–Ω"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—á–∞–Ω–∫–∞: {str(e)}")
        return {"status": "error", "message": str(e)}

@router.websocket("/stream/ws/{connection_id}")
async def websocket_audio_stream(
    websocket: WebSocket,
    connection_id: str,
    token: str = Query(...),
    meeting_id: Optional[str] = Query(None),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ VexaApiClient
        token_check = await vexa_client._make_request(
            "GET", 
            f"{vexa_client.stream_url}/api/v1/extension/check-token?token={token}"
        )
        
        if not token_check.get("success") or not token_check.get("data", {}).get("is_valid"):
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
            return
            
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
        user_id = None
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ token_check –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ user_id
            user_id = token_check.get("data", {}).get("user_id")
            if not user_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω (format: lawgpt_USER_ID_TIMESTAMP)
                token_parts = token.split('_')
                if len(token_parts) >= 3 and token_parts[0] == 'lawgpt':
                    user_id = token_parts[1]
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞")
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
            return
        
        if not user_id:
            logger.error("User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ")
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = next(get_db())
        user = db.query(models.User).filter(models.User.id == user_id).first()
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
            return
            
        settings = await get_user_vexa_settings(user, db)
        if not settings.enable_recording:
            logger.warning(f"–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await websocket.close(code=status.WS_1003_UNSUPPORTED_DATA)
            return
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await websocket.accept()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Ç–æ–∫–µ
        stream = db.query(VexaAudioStream).filter(
            VexaAudioStream.connection_id == connection_id,
            VexaAudioStream.user_id == user.id
        ).first()
        
        if not stream:
            stream = VexaAudioStream(
                connection_id=connection_id,
                user_id=user.id,
                source_type="websocket",
                stream_status="active",
                last_activity=datetime.now(),
                stream_metadata=json.dumps({
                    "connection_type": "websocket",
                    "user_agent": websocket.headers.get("user-agent", "unknown")
                })
            )
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω meeting_id, —Å–≤—è–∑—ã–≤–∞–µ–º —Å –Ω–∏–º
            if meeting_id:
                db_meeting = db.query(VexaMeeting).filter(
                    VexaMeeting.vexa_meeting_id == meeting_id,
                    VexaMeeting.user_id == user.id
                ).first()
                
                if db_meeting:
                    stream.meeting_id = db_meeting.id
            
            db.add(stream)
            db.commit()
            db.refresh(stream)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
        chunk_index = 0
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –¥–≤–æ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                audio_data = await websocket.receive_bytes()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é VexaApiClient
                result = await vexa_client.upload_audio_chunk(
                    connection_id=connection_id,
                    chunk_index=chunk_index,
                    audio_data=audio_data,
                    meeting_id=meeting_id,
                    source="google_meet"  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —á–∞–Ω–∫–∞
                chunk_index += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                stream.last_activity = datetime.now()
                db.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await websocket.send_json({"status": "ok", "chunk": chunk_index})
                
        except WebSocketDisconnect:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            stream.stream_status = "disconnected"
            db.commit()
            logger.info(f"WebSocket disconnected for connection_id {connection_id}")
            
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"Error in WebSocket audio stream: {str(e)}")
            stream.stream_status = "error"
            db.commit()
            await websocket.close(code=status.WS_1011_INTERNAL_ERROR)
            
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        logger.error(f"Authentication error in WebSocket: {str(e)}")
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)

@router.put("/stream/speakers")
async def update_speakers_data(
    connection_id: str = Query(...),
    meeting_id: Optional[str] = Query(None),
    speakers_data: Dict[str, Any] = None,
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–≤–æ—Ä—è—â–∏—Ö
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await get_user_vexa_settings(current_user, db)
    
    if not settings.enable_recording:
        raise HTTPException(status_code=403, detail="–ó–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–≤–æ—Ä—è—â–∏—Ö –≤ Vexa
    try:
        result = await vexa_client.update_speakers(
            connection_id=connection_id,
            speakers_data=speakers_data,
            meeting_id=meeting_id
        )
        
        if not result.get("success", False):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {result.get('error')}")
            return {"status": "error", "message": result.get("error")}
        
        return {"status": "success", "message": "–î–∞–Ω–Ω—ã–µ –æ –≥–æ–≤–æ—Ä—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {str(e)}")
        return {"status": "error", "message": str(e)}

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LawGPT –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –≤—Å—Ç—Ä–µ—á
@router.post("/context")
async def get_context_for_llm(
    query: str = Form(...),
    thread_id: Optional[str] = Form(None),
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db),
    vexa_client: VexaApiClient = Depends(get_vexa_client)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await get_user_vexa_settings(current_user, db)
    
    if not settings.enable_search:
        return {"context": "", "has_context": False}
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Vexa
    try:
        context = await vexa_client.get_relevant_context(query, str(current_user.id), 5)
        
        return {
            "context": context,
            "has_context": bool(context),
            "source": "vexa_transcripts"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}")
        return {"context": "", "has_context": False}

async def validate_token_with_cache(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if token in token_cache:
        cache_time, is_valid = token_cache[token]
        # –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
        if now - cache_time < timedelta(hours=1):
            return is_valid
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    vexa_client = get_vexa_client()
    result = await vexa_client._make_request(
        "GET", 
        f"{vexa_client.stream_url}/api/v1/extension/check-token?token={token}"
    )
    
    is_valid = result.get("success") and result.get("data", {}).get("is_valid", False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    token_cache[token] = (now, is_valid)
    
    return is_valid

# LRU-–∫—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@lru_cache(maxsize=128)
def get_cached_user_meetings(user_id: int, limit: int = 10, offset: int = 0):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from app.database import SessionLocal
    
    db = SessionLocal()
    try:
        meetings = db.query(VexaMeeting).filter(
            VexaMeeting.user_id == user_id
        ).order_by(
            VexaMeeting.start_time.desc()
        ).offset(offset).limit(limit).all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        result = []
        for meeting in meetings:
            result.append({
                "id": meeting.id,
                "meeting_id": meeting.vexa_meeting_id,
                "title": meeting.title,
                "start_time": meeting.start_time.isoformat(),
                "end_time": meeting.end_time.isoformat() if meeting.end_time else None,
                "status": meeting.status
            })
        
        return result
    finally:
        db.close()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ API-–º–∞—Ä—à—Ä—É—Ç–µ
@router.get("/meetings/cached")
async def get_cached_meetings(
    limit: int = Query(10, ge=1, le=50),
    offset: int = Query(0, ge=0),
    refresh: bool = Query(False, description="Force refresh cache"),
    current_user: models.User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if refresh:
        get_cached_user_meetings.cache_clear()
    
    meetings = get_cached_user_meetings(current_user.id, limit, offset)
    
    return {
        "meetings": meetings,
        "cached": True,
        "timestamp": datetime.now().isoformat()
    }



# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
def generate_safe_fernet_key():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Fernet-–∫–ª—é—á"""
    return Fernet.generate_key()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
ENCRYPTION_KEY = os.getenv("VEXA_ENCRYPTION_KEY")

try:
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á
    if not ENCRYPTION_KEY:
        ENCRYPTION_KEY = generate_safe_fernet_key().decode()
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: {ENCRYPTION_KEY}")
        print("–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è VEXA_ENCRYPTION_KEY")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á
    cipher_suite = Fernet(
        ENCRYPTION_KEY.encode('utf-8') if isinstance(ENCRYPTION_KEY, str) 
        else ENCRYPTION_KEY
    )
except Exception as e:
    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    logging.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á.")
    cipher_suite = Fernet(generate_safe_fernet_key())

def encrypt_token(token: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    """
    try:
        return cipher_suite.encrypt(token.encode()).decode()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return token  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def decrypt_token(encrypted_token: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
    """
    try:
        return cipher_suite.decrypt(encrypted_token.encode()).decode()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
        return encrypted_token  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    

# –§–∞–π–ª vexa/vexa_handlers.py - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def safe_encrypt_token(token: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    if not token:
        return ""
        
    try:
        return cipher_suite.encrypt(token.encode()).decode()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∏—Ñ—Ä–æ–≤—â–∏–∫ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–ª—é—á–æ–º
        new_key = Fernet.generate_key()
        new_cipher = Fernet(new_key)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["VEXA_ENCRYPTION_KEY"] = new_key.decode()
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {new_key.decode()}")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
        try:
            return new_cipher.encrypt(token.encode()).decode()
        except Exception as e2:
            logging.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e2}")
            return token  # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è